(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{419:function(n,a,t){"use strict";t.r(a);var e=t(43),r=Object(e.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"函数定义：-被设计为执行特定任务的代码块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数定义：-被设计为执行特定任务的代码块"}},[n._v("#")]),n._v(" 函数定义： 被设计为执行特定任务的代码块")]),n._v(" "),t("ul",[t("li",[n._v("函数也是一个对象")]),n._v(" "),t("li",[n._v("函数就是可以重复执行的代码块")]),n._v(" "),t("li",[n._v("函数就是完成特定功能的一段代码")]),n._v(" "),t("li",[n._v("使用typeof检查一个函数对象时，会返回function")])]),n._v(" "),t("h3",{attrs:{id:"函数作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数作用"}},[n._v("#")]),n._v(" 函数作用")]),n._v(" "),t("ul",[t("li",[n._v("将复杂的事情简单化，将重复使用的代码进行统一封装")])]),n._v(" "),t("h3",{attrs:{id:"基本使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本使用"}},[n._v("#")]),n._v(" 基本使用")]),n._v(" "),t("ul",[t("li",[n._v("函数定义  （常用方式）")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function 函数名([形参1,形参2, ...,形参N]){\n    函数体\n}\n")])])]),t("ul",[t("li",[n._v("函数定义 （不常用方式）")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var fun = new Function(\"console.log('大家好, 我是函数!');\");\n")])])]),t("ul",[t("li",[n._v("函数调用方式： 函数名()")])]),n._v(" "),t("h3",{attrs:{id:"常见的声明方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的声明方式"}},[n._v("#")]),n._v(" 常见的声明方式")]),n._v(" "),t("ul",[t("li",[n._v("函数声明")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function add(num1,num2){\n    return num1+num2;\n}\n")])])]),t("ul",[t("li",[n._v("函数表达式")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" var add= function(num1,num2){\n    return num1+num2;\n};　\n")])])]),t("ul",[t("li",[n._v("使用Function构造函数")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var add = new Function('num1','num2','return num1+num2');  \n\n不推荐使用,  主要用于面向对象时理解\"函数就是对象,  函数名就是指针\"这一概念\n")])])]),t("ul",[t("li",[n._v("区别")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面。\n\n//  代码没问题  \nconsole.log(f(5,6));\nfunction f(a, b) {\n     return a + b;\n}\n\n// 报错\nmyFun(6,7);\nvar myFun = function (a,b){\n   return a + b;\n}\n")])])]),t("h3",{attrs:{id:"函数的参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数的参数"}},[n._v("#")]),n._v(" 函数的参数")]),n._v(" "),t("ul",[t("li",[n._v("形参：形式上参与运算的变量，无实际值，为实参占位置，就像一个躯壳一样。"),t("br"),n._v(" "),t("code",[n._v("function f(a,b){} //a,b是形参，占位用，函数定义时形参无值")])]),n._v(" "),t("li",[n._v("实参：实际参与运算的变量。形参为他占位置，真实参与运算的变量。"),t("br"),n._v(" "),t("code",[n._v("f(x, y); //x, y实参，有具体的值，会把x, y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y")])]),n._v(" "),t("li",[n._v("注意点"),t("br"),n._v("\n1.在调用函数时，可以在()中指定实参,  实参将会赋值给函数中对应的形参"),t("br"),n._v("\n2.调用函数时解析器不会检查实参的类型,   所以开发中一般需要对参数进行类型的检查"),t("br"),n._v("\n3.函数的实参可以是任意的数据类型"),t("br"),n._v("\n4.调用函数时，解析器不会检查实参的数量, 多余实参不会被赋值,  如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined")])]),n._v(" "),t("h3",{attrs:{id:"arguments对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arguments对象"}},[n._v("#")]),n._v(" arguments对象")]),n._v(" "),t("p",[n._v("1.包含了传入函数中的所有参数,  arguments并不是一个数组，只是与数组相似,  除了拥有length属性，数组的所有属性和方法都不具备。"),t("br"),n._v("\n2.arguments对象还有一个名叫callee的属性,  该属性是一个指针,  指向拥有这个arguments对象的函数;")]),n._v(" "),t("h3",{attrs:{id:"length属性-return"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#length属性-return"}},[n._v("#")]),n._v(" length属性/return")]),n._v(" "),t("ul",[t("li",[n._v("length函数形参的个数")]),n._v(" "),t("li",[n._v("return结束函数执行/返回结果/")]),n._v(" "),t("li",[n._v("函数未使用return，返回其默认值undefined")])]),n._v(" "),t("h3",{attrs:{id:"匿名函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匿名函数"}},[n._v("#")]),n._v(" 匿名函数")]),n._v(" "),t("ul",[t("li",[n._v("没有命名的函数 "),t("code",[n._v("function () {}")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('用在绑定事件的时候\ndocument.onclick = function () {\n    alert(1);\n}\n\n定时器\nsetInterval(function () {\n        console.log(444);\n},1000);\n\n\n立即执行函数（IIFE）:函数定义完，立即被调用，叫做立即执行函数 /立即执行函数往往只会执行一次\n(function(){alert("hello")})();\n\n(function(num1,  num2){\n\tconsole.log("mum1 = "+ num1);\n\tconsole.log("num2 = "+ num2);\n})(100, 101);\n\n')])])]),t("h3",{attrs:{id:"回调函数（一个通过函数调用的函数）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回调函数（一个通过函数调用的函数）"}},[n._v("#")]),n._v(" 回调函数（一个通过函数调用的函数）")]),n._v(" "),t("ul",[t("li",[n._v("如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("一般用于递归\n求菲波那契数列（Fibonacci）的第n个数 1 1 2 3 5 8 13 21...\nfunction f1 (n) {\n    if (n == 1) return 1;\n    if (n == 2) return 1;\n        return f1(n-1) + f1(n-2);\n}\nconsole.log(f1(7)); //13\n\n\n求n个数的累加\nfunction getSum (n) {\n    if (n == 1) { return 1;}\n        return n + getSum(n - 1);\n}\nconsole.log(getSum(100)); // 5050\n")])])]),t("h3",{attrs:{id:"变量作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域"}},[n._v("#")]),n._v(" 变量作用域")]),n._v(" "),t("ul",[t("li",[n._v("全局作用域：定义在script或者不属于某个函数的变量")]),n._v(" "),t("li",[n._v("函数作用域：定义在函数内部的变量")])]),n._v(" "),t("blockquote",[t("p",[n._v("函数内部可以访问到该函数所属的外部作用域的变量(作用域链)"),t("br"),n._v("\n不使用var声明的变量是全局变量，不推荐使用(XXXX)"),t("br"),n._v("\n变量退出作用域之后会销毁，全局变量关闭网页或浏览器才会销毁")])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("局部变量, 先在函数内部的作用域找变量name，如果找到则使用，如果找不到去父级作用域找name变量")])]),n._v(" "),t("li",[t("p",[n._v("变量提升"),t("br"),n._v("\n定义变量的时候，变量的声明会被提升到作用域的最上面，变量的赋值不会提升。")])]),n._v(" "),t("li",[t("p",[n._v("函数提升"),t("br"),n._v("\nJavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("相关示例\nvar num = 10;\nfun();\nfunction fun(){\n    console.log(num);\n    var num = 20;\n}\n// undefined\n\n---\nvar a = 18;\nf1();\nfunction f1(){\n    var b=9;\n    console.log(a);\n    console.log(b);\n    var a = '123';\n}\n// undefined  9\n\n---\nf1();\nconsole.log(c);\nconsole.log(b);\nconsole.log(a);\nfunction f1(){\n    var a = b = c = 9;   等价于 var a = 9; b = 9; c =9;\n    console.log(a);\n    console.log(b);\n    console.log(c);\n}\n//  9  9  (a is not defined)  9  9  9 \n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);