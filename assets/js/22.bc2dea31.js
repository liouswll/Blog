(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{442:function(n,a,t){"use strict";t.r(a);var r=t(43),e=Object(r.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"递归"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[n._v("#")]),n._v(" 递归")]),n._v(" "),t("ul",[t("li",[n._v("递归，其实就是自己调用自己。")]),n._v(" "),t("li",[n._v("递归步骤：1. 寻找出口，递归一定有一个出口，锁定出口，保证不会死循环。2. 递归条件，符合递归条件，自己调用自己")])]),n._v(" "),t("h2",{attrs:{id:"斐波那契数列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#斐波那契数列"}},[n._v("#")]),n._v(" 斐波那契数列")]),n._v(" "),t("ol",[t("li",[n._v("方法一： 递归实现")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function fibonacci(n){\n        if(n < 0) throw new Error('输入的数字不能小于0');\n        if(n==1 || n==2){\n            return 1;\n        }else{\n            return fibonacci1(n-1) + fibonacci1(n-2);\n        }\n    }\n\n优点：代码比较简洁易懂；\n缺点：当数字太大时，会变得特别慢，原因是在计算F(9)时需要计算F(8)和F(7)，但是在计算F(8)时要计算F(7)和F(6)，这里面就会重复计算F(7)，每次都重复计算会造成不必要的浪费，所以这种方法并不是很好。\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[n._v("方法二： 使用闭包保存每次的递归值")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function fibonacci(n){\n        if(n < 0) throw new Error('输入的数字不能小于0');\n        let arr = [0,1];//在外部函数中定义数组，内部函数给数组添加值\n        function calc(n){\n            if(n<2){\n                return arr[n];\n            }\n            if(arr[n] != undefined){\n                return arr[n];\n            }\n            let data = calc(n-1) + calc(n-2);//使用data将每次递归得到的值保存起来\n            arr[n] = data;//将每次递归得到的值放到数组中保存\n            return data;\n        }\n        return calc(n);\n    }\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[n._v("方法三： 直接使用数组实现（动态规划）")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function fibonacci(n){\n        var a = [0,1,1];\n        if(n < 0) throw new Error('输入的数字不能小于0');\n        if(n >= 3){\n            for(var i=3;i<=n;i++){\n                a[i] = a[i-1]+a[i-2];\n            }\n        }\n        return a[n];\n    }\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);