(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{435:function(t,r,a){"use strict";a.r(r);var e=a(43),n=Object(e.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"内置对象（js本身已经写好的对象，创建出来以后可以直接使用-不需要定义）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置对象（js本身已经写好的对象，创建出来以后可以直接使用-不需要定义）"}},[t._v("#")]),t._v(" 内置对象（js本身已经写好的对象，创建出来以后可以直接使用,  不需要定义）")]),t._v(" "),a("h2",{attrs:{id:"array对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array对象"}},[t._v("#")]),t._v(" Array对象")]),t._v(" "),a("h4",{attrs:{id:"创建array对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建array对象"}},[t._v("#")]),t._v(" 创建Array对象")]),t._v(" "),a("p",[t._v("new Array();"),a("br"),t._v("\nnew Array(size);"),a("br"),t._v("\nnew Array(element0, element1, ..., elementn);")]),t._v(" "),a("h4",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("p",[t._v("constructor\t返回对创建此对象的数组函数的引用。"),a("br"),t._v("\nlength\t\t设置或返回数组中元素的数目。"),a("br"),t._v("\nprototype\t使您有能力向对象添加属性和方法。")]),t._v(" "),a("h4",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("ul",[a("li",[t._v("reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。注意: reduce() 对于空数组是不会执行回调函数的。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var numbers = [65, 44, 12, 4];\nfunction getSum(total, num) {\n    return total + num;\n}\nfunction myFunction(item) {\n    document.getElementById("demo").innerHTML = numbers.reduce(getSum);\n}\n// 125\n')])])]),a("ul",[a("li",[a("p",[t._v("conact() 连接两个或更多的数组，并返回组合后的数组。"),a("code",[t._v("[1,2].concat([3,4]) //[1, 2, 3, 4]")])])]),t._v(" "),a("li",[a("p",[t._v("slice() 从已有的数组中选定元素,返回组成的数组。")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("arr.slice(start,end)      -1为倒数第一位\n[1,2,3,4].silce(2) //     [3,4]  \n[1,2,3,4].silce(2,3) //   [3]  (正数包含首位)\n[1,2,3,4].silce(-1) //    [4] \n[1,2,3,4].silce(-4,3) //  [1,2,3]\n")])])]),a("ul",[a("li",[a("p",[t._v("join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。返回字符串"),a("br"),t._v(" "),a("code",[t._v('[1,2,3,4].join(",") //"1,2,3,4"')])])]),t._v(" "),a("li",[a("p",[t._v("valueOf() 返回数组对象的原始。 "),a("code",[t._v("[1,2,3,4].valueOf() //[1, 2, 3, 4]")])])]),t._v(" "),a("li",[a("p",[t._v("toString() 把数组转换为字符串，并返回结果。 "),a("code",[t._v('[1,2,3,4].toString() //"1,2,3,4"')])])])]),t._v(" "),a("blockquote",[a("p",[t._v("以上方法不改变原数组"),a("br"),t._v("\n————————"),a("br"),t._v("\n以下方法改变原数组")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("pop() 删除并返回数组的"),a("strong",[t._v("最后一个")]),t._v("元素。 "),a("code",[t._v("[1,2,3,4].pop() //4")])])]),t._v(" "),a("li",[a("p",[t._v("push() 向数组的"),a("strong",[t._v("末尾")]),t._v("添加一个或更多元素，并返回新的长度。 "),a("code",[t._v("[1,2,3,4].push(5) //5")])])]),t._v(" "),a("li",[a("p",[t._v("reverse()\t颠倒数组中元素的顺序(数组)。"),a("code",[t._v("[1,2,3,4].reverse() //[4, 3, 2, 1]")])])]),t._v(" "),a("li",[a("p",[t._v("shift() 删除并返回数组的"),a("strong",[t._v("第一个")]),t._v("元素。"),a("code",[t._v("[1,2,3,4].shift() //1")])])]),t._v(" "),a("li",[a("p",[t._v("unshift()\t向数组的"),a("strong",[t._v("开头")]),t._v("添加一个或更多元素，并返回新的长度。 "),a("code",[t._v("[1,2,3,4].unshift(5) //5")])])]),t._v(" "),a("li",[a("p",[t._v("sort() 对数组的元素进行排序。")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[3,2,1,4].sort() // [1,2,3,4]\narr.sort(sortby)  参数可选，规定排序顺序，！！！！必须是函数。\n如果无参数，按照字符编码的顺序进行排序。（默认为升序排列）\n\n参数函数（数字排序）\n1）升序\nvar compare = function (x, y) { //比较函数\n　　if (x < y) {\n　　　　return -1;\n　　} else if (x > y) {\n　　　　return 1;\n　　} else {\n　　　　return 0;\n　　}\n}\n\n2）升序——比较数字而非字符串，比较函数可以简单的以 a 减 b\narr.sort(function(a,b){\n　　　retun a-b;\n});\n\n")])])]),a("ul",[a("li",[t._v("arrayObject.splice(index,howmany,item1,.....,itemX) 删除元素，并向数组添加新元素。")])]),t._v(" "),a("blockquote",[a("p",[t._v("index\t    必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。"),a("br"),t._v("\nhowmany\t必需。要删除的项目数量。如果设置为 0，则不会删除项目。"),a("br"),t._v("\nitem1, ..., itemX\t可选。向数组添加的新项目。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var arr = new Array(6)\narr[0] = "George"\narr[1] = "John"\narr[2] = "Thomas"\narr[3] = "James"\narr[4] = "Adrew"\narr[5] = "Martin"\n\ndocument.write(arr + "<br />")\narr.splice(2,3,"William")\ndocument.write(arr)\n\nGeorge,John,Thomas,James,Adrew,Martin\nGeorge,John,William,Martin\n')])])]),a("ul",[a("li",[t._v("toSource() 返回该对象的源代码。")]),t._v(" "),a("li",[t._v("toLocaleString() 数组转换为本地字符串，返回字符串。")])]),t._v(" "),a("h4",{attrs:{id:"数组高级方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组高级方法"}},[t._v("#")]),t._v(" 数组高级方法")]),t._v(" "),a("ul",[a("li",[t._v('map() "映射"对数组中的'),a("strong",[t._v("每一项运行给定函数")]),t._v("，返回"),a("strong",[t._v("每次函数调用的结果组成的数组")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.map(function(item){\n    return item*item;\n});\nconsole.log(arr2); //[1, 4, 9, 16, 25]\n")])])]),a("ul",[a("li",[t._v('filter() "过滤"功能，数组中的'),a("strong",[t._v("每一项运行给定函数")]),t._v("，返回"),a("strong",[t._v("满足过滤条件组成的数组")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar arr2 = arr.filter(function(x, index) {\n    return index % 3 === 0 || x >= 8;\n}); \nconsole.log(arr2); //[1, 4, 7, 8, 9, 10]\n")])])]),a("ul",[a("li",[t._v("erery() 判断数组中"),a("strong",[t._v("每一项都")]),t._v("是否满足条件，"),a("strong",[t._v("只有所有项都满足条件，才会返回true")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.every(function(x) {\n    return x < 10;\n}); \nconsole.log(arr2); //true\n\nvar arr3 = arr.every(function(x) {\n    return x < 3;\n}); \nconsole.log(arr3); // false\n")])])]),a("ul",[a("li",[t._v("some() 判断数组中是否存在满足条件的项，只要"),a("strong",[t._v("有一项满足条件，就会返回true")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var arr = [1, 2, 3, 4, 5];\nvar arr2 = arr.some(function(x) {\n    return x < 3;\n}); \nconsole.log(arr2); //true\n\nvar arr3 = arr.some(function(x) {\n    return x < 1;\n}); \nconsole.log(arr3); // false\n")])])]),a("ul",[a("li",[t._v("forEach() 对数组进行遍历循环，对"),a("strong",[t._v("数组中的每一项运行给定函数")]),t._v("。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var array = ['a', 'b', 'c'];\narray.forEach(function(element) {\n  console.log(element);\n});\n\n\nvar arr = [1,2,3,4];\narr.forEach(alert); \n//    等价于：\nvar arr = [1, 2, 3, 4];\nfor (var k = 0, k < arr.length;; k++) {\n    alert(array[k]);\n} \n")])])]),a("h2",{attrs:{id:"boolean对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean对象"}},[t._v("#")]),t._v(" Boolean对象")]),t._v(" "),a("h4",{attrs:{id:"创建boolean对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建boolean对象"}},[t._v("#")]),t._v(" 创建Boolean对象")]),t._v(" "),a("p",[t._v("new Boolean(value);\t//构造函数"),a("br"),t._v("\nBoolean(value);\t\t//转换函数")]),t._v(" "),a("h4",{attrs:{id:"方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-2"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("p",[t._v("toSource()\t返回该对象的源代码。"),a("br"),t._v("\ntoString()\t把逻辑值转换为字符串，并返回结果。"),a("br"),t._v("\nvalueOf()\t返回 Boolean 对象的原始值。")]),t._v(" "),a("h2",{attrs:{id:"data对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data对象"}},[t._v("#")]),t._v(" Data对象")]),t._v(" "),a("h4",{attrs:{id:"创建date对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建date对象"}},[t._v("#")]),t._v(" 创建Date对象")]),t._v(" "),a("p",[t._v("var myDate=new Date()")]),t._v(" "),a("h4",{attrs:{id:"属性-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-2"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("p",[t._v("constructor\t返回对创建此对象的 Date 函数的引用。"),a("br"),t._v("\nprototype\t使您有能力向对象添加属性和方法。")]),t._v(" "),a("h4",{attrs:{id:"方法-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-3"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("p",[t._v("getDate()   从 Date 对象返回一个月中的某一天 (1 ~ 31)。"),a("br"),t._v("\ngetDay()    从 Date 对象返回一周中的某一天 (0 ~ 6)。"),a("br"),t._v("\ngetMonth()  从 Date 对象返回月份 (0 ~ 11)。"),a("br"),t._v("\ngetFullYear()   从 Date 对象以四位数字返回年份。"),a("br"),t._v("\ngetHours()  返回 Date 对象的小时 (0 ~ 23)。"),a("br"),t._v("\ngetMinutes()    返回 Date 对象的分钟 (0 ~ 59)。"),a("br"),t._v("\ngetTime()   返回 1970 年 1 月 1 日至今的毫秒数。"),a("br"),t._v("\nvalueOf()   返回 Date 对象的原始值。")]),t._v(" "),a("h2",{attrs:{id:"math对象（无构造函数）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#math对象（无构造函数）"}},[t._v("#")]),t._v(" Math对象（无构造函数）")]),t._v(" "),a("h4",{attrs:{id:"方法-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-4"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("p",[t._v("abs(x)\t\t返回数的绝对值。"),a("br"),t._v(" "),a("strong",[t._v("floor(x)\t对数进行下舍入。")]),a("br"),t._v(" "),a("strong",[t._v("ceil(x)\t\t对数进行上舍入。")]),a("br"),t._v(" "),a("strong",[t._v("round(x)\t把数四舍五入为最接近的整数。")]),a("br"),t._v("\nmax(x,y)\t返回 x 和 y 中的最高值。"),a("br"),t._v("\nmin(x,y)\t返回 x 和 y 中的最低值。"),a("br"),t._v("\nrandom()\t返回 0 ~ 1 之间的随机数。"),a("br"),t._v("\ntoSource()\t返回该对象的源代码。"),a("br"),t._v("\nvalueOf()\t返回 Math 对象的原始值。")]),t._v(" "),a("h2",{attrs:{id:"number对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number对象"}},[t._v("#")]),t._v(" Number对象")]),t._v(" "),a("h4",{attrs:{id:"属性-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-3"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("ul",[a("li",[t._v("constructor\t返回对创建此对象的 Number 函数的引用。")]),t._v(" "),a("li",[t._v("MAX_VALUE\t    可表示的最大的数。")]),t._v(" "),a("li",[t._v("MIN_VALUE\t    可表示的最小的数。")]),t._v(" "),a("li",[t._v("NaN\t\t    非数字值。")]),t._v(" "),a("li",[t._v("NEGATIVE_INFINITY\t\t负无穷大，溢出时返回该值。（infinty）")]),t._v(" "),a("li",[t._v("POSITIVE_INFINITY\t\t正无穷大，溢出时返回该值。")])]),t._v(" "),a("h4",{attrs:{id:"方法-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-5"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("p",[t._v("toString() 把数字转换为字符串，使用指定的基数。  "),a("code",[t._v('var a = 15 a.toString(2) // "1111"')]),a("br"),t._v("\ntoFixed() 把数字转换为字符串，结果的"),a("strong",[t._v("小数点后有指定位数的数字")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var a = 15    a.toFixed(10)    //"15.0000000000"\n')])])]),a("h2",{attrs:{id:"string对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string对象"}},[t._v("#")]),t._v(" String对象")]),t._v(" "),a("h4",{attrs:{id:"创建string对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建string对象"}},[t._v("#")]),t._v(" 创建String对象")]),t._v(" "),a("p",[t._v("new String(s);"),a("br"),t._v("\nString(s);")]),t._v(" "),a("h4",{attrs:{id:"属性-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-4"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),a("p",[t._v("constructor\t对创建该对象的函数的引用"),a("br"),t._v("\nlength\t\t字符串的长度"),a("br"),t._v("\nprototype\t允许您向对象添加属性和方法")]),t._v(" "),a("h4",{attrs:{id:"方法-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-6"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("charAt()\t    返回在指定位置的字符。  "),a("code",[t._v('"qweqweq".charAt(1) // w')])])]),t._v(" "),a("li",[a("p",[t._v("charCodeAt()\t返回在指定的位置的字符的 Unicode 编码。")])]),t._v(" "),a("li",[a("p",[t._v("concat()\t    连接字符串。")])]),t._v(" "),a("li",[a("p",[t._v("indexOf()\t    检索字符串。")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("'asdada'.indexOf('v') // -1\n'asdada'.indexOf('d') // 2\n")])])]),a("blockquote",[a("p",[t._v("stringObject.indexOf(searchvalue,fromindex)"),a("br"),t._v("\nsearchvalue\t必需。规定需检索的字符串值。"),a("br"),t._v("\nfromindex\t可选的整数参数。规定在字符串中开始检索的位置"),a("br"),t._v("\n注释：indexOf() 方法对大小写敏感！"),a("br"),t._v("\n注释：j检索到则返回字符串"),a("strong",[t._v("位置")]),t._v("，如果要检索的字符串值没有出现，则该方法"),a("strong",[t._v("返回 -1")]),t._v("。")])]),t._v(" "),a("ul",[a("li",[t._v("lastIndexOf()\t从后向前搜索字符串。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("'asdada'.lastIndexOf('d') // 4\n'asdada'.lastIndexOf('w') // -1\n")])])]),a("ul",[a("li",[t._v("match()\t找到一个或多个正则表达式的匹配。"),a("strong",[t._v("(存放匹配结果的数组)")])])]),t._v(" "),a("blockquote",[a("p",[t._v("stringObject.match(searchvalue) searchvalue规定要检索的字符串值。"),a("br"),t._v("\nstringObject.match(regexp) 返回值存放匹配结果的数组。该数组的内容依赖于regexp是否具有全局标志g。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var str="Hello world!"\nstr.match("world") // world\nstr.match("World") // null\nstr.match("worlld") //null\nstr.match("world!") //world!\n\nvar str="1 plus 2 equal 3"\nstr.match(/\\d+/g) // 1,2,3\n')])])]),a("ul",[a("li",[t._v("replace(regexp/substr,replacement) 替换与正则表达式匹配的子串。"),a("strong",[t._v("返回一个新的字符串")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var str="Visit Microsoft!"\ndocument.write(str.replace(/Microsoft/, "W3School"))\n// Visit W3School!\n\n全局替换\nvar str="Welcome to Microsoft! "\nstr=str + "We are proud to announce that Microsoft has "\nstr=str + "one of the largest Web Developers sites in the world."\n// document.write(str.replace(/Microsoft/g, "W3School"))\n')])])]),a("ul",[a("li",[t._v("stringObject.search(regexp) 检索与正则表达式相匹配的值。"),a("strong",[t._v("返回值：stringObj中找到的第一个与reregexp相匹配子串起始的位置，如果没有找到则返回-1")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var str="Visit W3School!"\ndocument.write(str.search(/W3School/))\n// 6\n')])])]),a("ul",[a("li",[a("p",[t._v("slice(tart,end) 提取字符串的片断，并在新的字符串中"),a("strong",[t._v("返回被提取的部分")]),t._v("。"),a("code",[t._v("stringObject.slice(start,end) start 开始（包括 start）到 end 结束（不包括 end）")])])]),t._v(" "),a("li",[a("p",[t._v("split(separator,howmany) 把字符串分割为字符串数组，"),a("strong",[t._v("返回字符串数组")]),t._v("。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("separator 分割依据 // var words = sentence.split(/\\s+/)\nhowmany 长度")])]),t._v(" "),a("ul",[a("li",[t._v("substr(start,length) 从起始索引号提取字符串中指定数目的字符。"),a("strong",[t._v("一个新的字符串，包含从 stringObject 的 start（包括 start 所指的字符） 处开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到 stringObject 的结尾的字符")])])]),t._v(" "),a("blockquote",[a("p",[t._v("str.substr(3,7)")])]),t._v(" "),a("ul",[a("li",[t._v("substring(start,stop) 提取字符串中两个指定的索引号之间的字符。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('stringObject.substr(start不可为负数,length为起始时的长度)\n\nvar str="Hello world!"\ndocument.write(str.substring(3,7))\n')])])]),a("h2",{attrs:{id:"对象遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象遍历"}},[t._v("#")]),t._v(" 对象遍历")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("可枚举属性是指那些内部 “可枚举” 标志设置为 true 的属性")]),t._v("。对于通过直接的赋值和属性初始化的属性，该标识值默认为即为 true。但是对于通过 "),a("strong",[t._v("Object.defineProperty")]),t._v(" 等定义的属性，该标识值默认为 false。"),a("br"),t._v("\n其中js中基本包装类型的原型属性是不可枚举的，如Object, Array, Number等。"),a("br"),t._v(" "),a("strong",[t._v("可枚举")]),t._v("的属性可以通过"),a("strong",[t._v("for...in")]),t._v("循环进行遍历（除非该属性名是一个Symbol），或者通过"),a("strong",[t._v("Object.keys()方法")]),t._v("返回一个可枚举属性的数组。"),a("strong",[t._v("其不会返回不可枚举的属性")])])]),t._v(" "),a("ol",[a("li",[t._v("for in 循环是最基础的遍历对象的方式，它还会"),a("strong",[t._v("得到对象原型链上的属性")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 创建一个对象并指定其原型，bar 为原型上的属性 _proto_上\nconst obj = Object.create({\n bar: 'bar'\n})\n \n// foo 为对象自身的属性\nobj.foo = 'foo'\nfor (let key in obj) {\n console.log(obj[key]) // foo, bar\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("Object.keys()一个对象方法，该方法返回"),a("strong",[t._v("对象自身属性名组成的数组")]),t._v("，它会"),a("strong",[t._v("自动过滤掉原型链上的属性")]),t._v("，然后可以通过数组的 forEach() 方法来遍历。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// simple array\nvar arr = ['a', 'b', 'c'];\nconsole.log(Object.keys(arr)); // console: ['0', '1', '2']\n\n\n// array like object\nvar obj = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.keys(obj)); // console: ['0', '1', '2']\n\nObject.keys(obj).forEach(()=>{\n    console.log(obj[key])  // 可枚举属性 1 2 3 \n})\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("Object.getOwnPropertyNames() 也是 ES5 新增的一个对象方法，该方法"),a("strong",[t._v("返回对象自身属性名组成的数组")]),t._v("，"),a("strong",[t._v("包括不可枚举的属性")]),t._v("，也可以通过数组的 forEach 方法来遍历")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 创建一个对象并指定其原型，bar 为原型上的属性\n// baz 为对象自身的属性并且不可枚举\nconst obj = Object.create({\n bar: 'bar'\n}, {\n baz: {\n  value: 'baz',\n  enumerable: false\n }\n})\n \nobj.foo = 'foo'\n \n// 不包括不可枚举的 baz 属性\nObject.keys(obj).forEach((key) => {\n console.log(obj[key]) // foo\n})\n \n// 包括不可枚举的 baz 属性\nObject.getOwnPropertyNames(obj).forEach((key) => {\n console.log(obj[key]) // baz, foo\n})\n")])])])])}),[],!1,null,null,null);r.default=n.exports}}]);