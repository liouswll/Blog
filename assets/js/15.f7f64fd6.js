(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{355:function(t,a,e){t.exports=e.p+"assets/img/git.7ef81750.png"},456:function(t,a,e){"use strict";e.r(a);var s=e(43),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),s("p",[s("img",{attrs:{src:e(355),alt:"git"}}),t._v("\nWorkspace：工作区"),s("br"),t._v("\nIndex / Stage：暂存区"),s("br"),t._v("\nRepository：仓库区（或本地仓库）"),s("br"),t._v("\nRemote：远程仓库")]),t._v(" "),s("h2",{attrs:{id:"命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令"}},[t._v("#")]),t._v(" 命令")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("- git init\t                 初始化\n- git add <filename> \t     添加文件导暂存区\n- git add .                  添加全部文件\n- git rm -cached <filename>\t 移除暂存区的内容\n- git commit -m <description>     提交到本地库(必须先add)\n- git commit -am                  可提交未add文件，但是不包括未创建文件\n- git push origin \n")])])]),s("h2",{attrs:{id:"日志"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[t._v("#")]),t._v(" 日志")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("- git log\t查看历史提交\n- git reflog\n")])])]),s("h2",{attrs:{id:"版本控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本控制"}},[t._v("#")]),t._v(" 版本控制")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("- git reset --hard\t             简洁/完整的哈希索引\n- git reset --hard HEAD\t 强制工作区 暂存区  本地库为当前HEAD指针所在的版本\n- git reset --hard HEAD^     回退一个版本\n- git reset --hard HEAD ~1  回退一个版本\n")])])]),s("h2",{attrs:{id:"比较差异"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#比较差异"}},[t._v("#")]),t._v(" 比较差异")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("- git diff  比较工作区和暂存区的文件差异\n- git diff <filename>   比较工作区暂存区指定问价差异\n")])])]),s("h2",{attrs:{id:"分支操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('- git branch -v   查看所有分支\n- git branch -d <分支名>   删除本地分支\n- git branch   新建分支\n- git checkout  切换分支\n- git merge <被合并分支名>：合并分支\n\n　tip：如master分支合并 hot_fix分支，那么当前必须处于master分支上，然后执行 git merge hot_fix 命令\n\n　tip2：合并出现冲突\n\n　　①删除git自动标记符号，如<<<<<<< HEAD、>>>>>>>等\n\n　　②修改到满意后，保存退出\n\n　　③git add <file name>\n\n　　④git commit -m "日志信息"，此时后面不要带文件名\n')])])]),s("h2",{attrs:{id:"本地和远程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地和远程"}},[t._v("#")]),t._v(" 本地和远程")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("- git clone <Url>  克隆\n- git remote -v 查看远程仓库别名\n- git remote add <别名><远程仓库地址>   新建远程仓库地址别名\n- git remote rm <别名>  删除本地中远程库别名\n- git push <别名> <分支名>：本地库某个分支推送到远程库，分支必须指定\n- git pull <别名> <分支名>：把远程库的修改拉取到本地  tip：该命令包括git fetch，git merge\n- git fetch <远程库别名> <远程库分支名>：抓取远程库的指定分支到本地，但没有合并\n- git merge <远程库别名/远程库分支名>：将抓取下来的远程的分支，跟当前所在分支进行合并\n- git fork：复制远程库\n")])])]),s("h2",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h4",{attrs:{id:"github提交没有commits显示-也就是没有小绿框的显示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#github提交没有commits显示-也就是没有小绿框的显示"}},[t._v("#")]),t._v(" Github提交没有commits显示(也就是没有小绿框的显示)")]),t._v(" "),s("ul",[s("li",[t._v("使用查看log的命令发现有些提交的日志中没有指明作者的邮箱地址\ngit log")])]),t._v(" "),s("h4",{attrs:{id:"使用以下命令对作者的邮箱进行配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用以下命令对作者的邮箱进行配置"}},[t._v("#")]),t._v(" 使用以下命令对作者的邮箱进行配置")]),t._v(" "),s("ul",[s("li",[s("p",[t._v('如果只想修改这一个仓库的邮箱：\ngit config user.email "your_email@example.com"')])]),t._v(" "),s("li",[s("p",[t._v("可以使用如下命令确认修改是否成功：\ngit config user.email  就会显示你目前的邮箱。")])]),t._v(" "),s("li",[s("p",[t._v('如果想对所有的仓库生效，避免在别的仓库继续出现这个情况，则输入：\ngit config --global user.email "your_email@example.com"')])]),t._v(" "),s("li",[s("p",[t._v("同样可以查看确认一下：\ngit config --global user.email")])])]),t._v(" "),s("h2",{attrs:{id:"commit备注"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit备注"}},[t._v("#")]),t._v(" commit备注")]),t._v(" "),s("p",[t._v("feat： 新增 feature")]),t._v(" "),s("p",[t._v("fix: 修复 bug")]),t._v(" "),s("p",[t._v("docs: 仅仅修改了文档，比如 README, CHANGELOG, CONTRIBUTE等等")]),t._v(" "),s("p",[t._v("style: 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑")]),t._v(" "),s("p",[t._v("refactor: 代码重构，没有加新功能或者修复 bug")]),t._v(" "),s("p",[t._v("perf: 优化相关，比如提升性能、体验")]),t._v(" "),s("p",[t._v("test: 测试用例，包括单元测试、集成测试等")]),t._v(" "),s("p",[t._v("chore: 改变构建流程、或者增加依赖库、工具等")]),t._v(" "),s("p",[t._v("revert: 回滚到上一个版本")])])}),[],!1,null,null,null);a.default=r.exports}}]);