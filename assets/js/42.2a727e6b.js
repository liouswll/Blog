(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{451:function(t,n,e){"use strict";e.r(n);var o=e(43),r=Object(o.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"生命周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),e("ol",[e("li",[t._v("生命周期")])]),t._v(" "),e("ul",[e("li",[t._v("加载阶段\tMouting")]),t._v(" "),e("li",[t._v("更新阶段\tUpdating")]),t._v(" "),e("li",[t._v("卸载阶段\tUnmounting")])]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("旧生命周期")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("- Mounting(加载阶段)\n- constructor()\t加载时调用一次，可以初始化state\n- getDefaultProps()\t设置初始的props，也可以设置组件的默认属性\n- getInitialState()\t\t初始化state，可以直接在constructor中定义this.state\n- componentWillMount()\t组件加载时使用，整个生命周期只调用一次，此时可以修改state\n- render()\t创建虚拟DOM，进行diff算法，更新DOM树\n- componentDidMount()\t组件渲染调用，只调用一次。\n\n- Updating(更新阶段)\n- componentWillReceiveProps(nextProps)\t组件加载时不调用，只有在接受新的props时调用\n- shouldComponentUpdate(nextProps, nextState)\t组件接收到新的props，state时调用。return true时会更新Dom（进行Diff算法），return false 能阻止更新（不调用render）\n- componentWillUpdate()\t组件加载时不调用，只有更新是才调用，此时可以修改state\n- render()\t创建虚拟DOM，进行diff算法，更新DOM树\n- componentDidUpdate() \t组价加载时不调用，更新完成后调用\n\n- Unmounting(卸载阶段)\n- componentWillUnmount()\t组件渲染之后掉用，只调用一次\n")])])]),e("p",[e("strong",[t._v("新旧图示生命周期")]),t._v("\n4. 新生命周期\n-Mounting(加载阶段)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("construntor()\t加载时调用一次，初始化state\n\ngetDerivedStateFormProps(props, state)\t\n组件每次被render的时候，包括在组件构建之后(虚拟dom之后，实际dom挂载之前)，每次获取新的props或state之后；\n每次接收新的props之后都会返回一个对象作为新的state，返回null则说明不需要更新state；配合componentDidUpdate，可以覆盖componentWillReceiveProps的所有用法\n\nrender() react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行\n\ncomponentDidMount()  组件渲染之后调用，只调用一次\n\n")])])]),e("ul",[e("li",[t._v("Updating(更新)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("getDerivedStateFormProps(props, state)\t\n组件每次被render的时候，包括在组件构建之后(虚拟dom之后，实际dom挂载之前)，每次获取新的props或state之后；\n每次接收新的props之后都会返回一个对象作为新的state，返回null则说明不需要更新state；配合componentDidUpdate，可以覆盖componentWillReceiveProps的所有用法\n\nshouldComponentUpdate(nextProps, nextState) 组件接受到新的Props或者state时调用，return true时会更新，return false时不更新\nrender() react最重要的步骤，创建虚拟dom，进行diff算法，更新dom树都在此进行\n\ngetSnapshotBeforeUpdate(prevProps, prevState) update发生的时候，在render之后，在组件dom渲染之前；返回一个值，作为componentDidUpdate的第三个参数；配合componentDidUpdate, 可以覆盖componentWillUpdate的所有用法\n\ncomponentDidUpdate  组件加载时不调用，组件更新完成后调用\n")])])]),e("ul",[e("li",[t._v("Unmounting（卸载阶段）\n组件渲染之后调用，只调用一次")]),t._v(" "),e("li",[t._v("Error Handling(错误处理)\ncomponentDidCatch(error，info)  任何一处的javascript报错会触发")])])])}),[],!1,null,null,null);n.default=r.exports}}]);