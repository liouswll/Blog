(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{417:function(t,e,a){"use strict";a.r(e);var r=a(43),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"正则（内置对象）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则（内置对象）"}},[t._v("#")]),t._v(" 正则（内置对象）")]),t._v(" "),a("p",[a("code",[t._v("https://www.runoob.com/jsref/jsref-obj-regexp.html")])]),t._v(" "),a("ol",[a("li",[t._v("正则表达式：用于对"),a("strong",[t._v("字符串模式匹配和检索替换")]),t._v("，对字符串执行模式匹配强大的工具。")]),t._v(" "),a("li",[t._v("语法：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var patt = new RegExp(pattern, modifiers)\n或者\nvar patt = /pattern/modifiers\n")])])]),a("p",[a("strong",[t._v("pattern(模式)：描述表达式的模式。")]),a("br"),t._v(" "),a("strong",[t._v("modifiers(修饰符)：用于指定全局匹配，区分大小写的匹配和多行匹配。")])]),t._v(" "),a("blockquote",[a("p",[t._v("当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \\）。比如，以下是等价的："),a("br"),t._v('\nvar re = new RegExp("\\w+");'),a("br"),t._v("\nvar re = /\\w+/;")])]),t._v(" "),a("blockquote",[a("p",[t._v("\\w 匹配字母、数字、下划线的字符。"),a("br"),t._v(" "),a("em",[t._v("表示任意多个多个字符"),a("br"),t._v("\n\\w")]),t._v("表示任意多个\\w")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("修饰符：")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("序号")]),t._v(" "),a("th",[t._v("修饰符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1")]),t._v(" "),a("td",[t._v("i")]),t._v(" "),a("td",[t._v("执行对大小写不敏感的匹配。")])]),t._v(" "),a("tr",[a("td",[t._v("2")]),t._v(" "),a("td",[t._v("g")]),t._v(" "),a("td",[t._v("执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。")])]),t._v(" "),a("tr",[a("td",[t._v("3")]),t._v(" "),a("td",[t._v("m")]),t._v(" "),a("td",[t._v("执行多行匹配。")])])])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("方括号：查找某个范围的内的字符。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("表达式\t描述\n[abc]\t查找方括号之间的任何字符。\n[^abc]\t查找任何不在方括号之间的字符。\n[0-9]\t查找任何从 0 至 9 的数字。\n[a-z]\t查找任何从小写 a 到小写 z 的字符。\n[A-Z]\t查找任何从大写 A 到大写 Z 的字符。\n[A-z]\t查找任何从大写 A 到小写 z 的字符。\n[adgk]\t查找给定集合内的任何字符。\n[^adgk]\t查找给定集合外的任何字符。\n(red|blue|green)\t查找任何指定的选项。\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("元字符：拥有特殊含义的字符。")])]),t._v(" "),a("h2",{attrs:{id:"正则对象的方法-exec-test-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则对象的方法-exec-test-tostring"}},[t._v("#")]),t._v(" 正则对象的方法(exec,test,toString)")]),t._v(" "),a("ol",[a("li")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("返回值")]),t._v(" "),a("th",[t._v("语法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("exec")]),t._v(" "),a("td",[t._v("检索字符串中的正则表达式的匹配")]),t._v(" "),a("td",[t._v("字符串中有匹配的返回改匹配值，否则返回null")]),t._v(" "),a("td",[t._v("RegExpObject.exec(string)")])])])]),t._v(" "),a("p",[t._v("示例:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var str="Hello world!";\n//查找"Hello"\nvar patt=/Hello/g;\nvar result=patt.exec(str);\ndocument.write("返回值: " +  result); \n\n返回值: Hello\n__________________________________________\n//查找 "RUNOOB"\npatt=/RUNOOB/g;\nresult=patt.exec(str);\ndocument.write("<br>返回值: " +  result);\n\n返回值: null\n')])])]),a("ol",{attrs:{start:"2"}},[a("li")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("返回值")]),t._v(" "),a("th",[t._v("语法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("test")]),t._v(" "),a("td",[t._v("用于检测一个字符串是否匹配某个模式")]),t._v(" "),a("td",[t._v("如果字符串中有匹配的值返回 true ，否则返回 false。")]),t._v(" "),a("td",[t._v("RegExpObject.test(string)")])])])]),t._v(" "),a("p",[t._v("示例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var str="Hello world!";\n//查找"Hello"\nvar patt=/Hello/g;\nvar result=patt.test(str);\ndocument.write("返回值: " +  result);  // 返回值: true\n\n//查找 "Runoob"\npatt=/Runoob/g;\nresult=patt.test(str);\ndocument.write("<br>返回值: " +  result); // 返回值: false\n')])])]),a("ol",{attrs:{start:"3"}},[a("li")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("返回值")]),t._v(" "),a("th",[t._v("语法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("toString()")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("返回正则表达式的字符串值。")]),t._v(" "),a("td",[t._v("RegExpObject.toString()")])])])]),t._v(" "),a("p",[t._v("示例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var patt = new RegExp("RUNOOB", "g");\nvar res = patt.toString(); //  /RUNOOB/g\n')])])]),a("h2",{attrs:{id:"支持正则表达式的-string-对象的方法-match-replace-search-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持正则表达式的-string-对象的方法-match-replace-search-split"}},[t._v("#")]),t._v(" 支持正则表达式的 String 对象的方法(match,replace,search,split)")]),t._v(" "),a("ol",[a("li")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("返回值")]),t._v(" "),a("th",[t._v("语法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("match()")]),t._v(" "),a("td",[t._v("可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。")]),t._v(" "),a("td",[t._v("存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g。 如果没找到匹配结果返回 null 。")]),t._v(" "),a("td",[t._v("string.match(regexp)")])])])]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('全局查找字符串 "ain"，且不区分大小写:\nvar str = "The rain in SPAIN stays mainly in the plain"; \nvar n=str.match(/ain/gi);   // ain,AIN,ain,ain\n\n判断是否微信浏览器:\nfunction is_weixn(){  \n    var ua = navigator.userAgent.toLowerCase();  \n    if(ua.match(/MicroMessenger/i)=="micromessenger") {  \n        return true;  \n    } else {  \n        return false;  \n    }  \n}\n')])])]),a("ol",{attrs:{start:"2"}},[a("li")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("返回值")]),t._v(" "),a("th",[t._v("语法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("replace()")]),t._v(" "),a("td",[t._v("在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串")]),t._v(" "),a("td",[t._v("一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的。")]),t._v(" "),a("td",[t._v("string.replace(searchvalue,newvalue)")])])])]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('全局替换：\nvar str="Mr Blue has a blue house and a blue car";\nvar n=str.replace(/blue/g,"red");   // Mr Blue has a red house and a red car\n\n// 忽略大小写\nvar str="Mr Blue has a blue house and a blue car";\nvar n=str.replace(/blue/gi, "red");  // Mr red has a red house and a red car\n\n\nString.prototype.replaceAll = function(search, replacement) {\n    var target = this;\n    return target.replace(new RegExp(search, \'g\'), replacement);\n};\nfunction myFunction() {\n\tvar str=document.getElementById("demo").innerHTML;\n\tvar n=str.replaceAll("Microsoft","Runoob");\n\tdocument.getElementById("demo").innerHTML=n;\n}\nVisit Microsoft!Visit Microsoft!Visit Microsoft!  \nVisit Runoob!Visit Runoob!Visit Runoob!\n')])])]),a("ol",{attrs:{start:"3"}},[a("li")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("返回值")]),t._v(" "),a("th",[t._v("语法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("search()")]),t._v(" "),a("td",[t._v("检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串")]),t._v(" "),a("td",[t._v("与指定查找的字符串或者正则表达式相匹配的 String 对象起始位置。")]),t._v(" "),a("td",[t._v("string.search(searchvalue)")])])])]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('执行一次忽略大小写的检索:\nvar str="Mr. Blue has a blue house";\ndocument.write(str.search(/blue/i)); //4\n\n执行一次对大小写敏感的查找:\nvar str="Mr. Blue has a blue house";\ndocument.write(str.search("blue"));  // 15\n')])])]),a("ol",{attrs:{start:"4"}},[a("li")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("描述")]),t._v(" "),a("th",[t._v("返回值")]),t._v(" "),a("th",[t._v("语法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("split()")]),t._v(" "),a("td",[t._v("把一个字符串分割成字符串数组。split() 方法不改变原始字符串。")]),t._v(" "),a("td",[t._v("与指定查找的字符串或者正则表达式相匹配的 String 对象起始位置。")]),t._v(" "),a("td",[t._v("string.split(separator,limit可选。该参数可指定返回的数组的最大长度。)")])])])]),t._v(" "),a("p",[t._v("示例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('省略分割参数：\nvar str="How are you doing today?";\nvar n=str.split();\nn 输出数组值得结果:\nHow are you doing today?\n\n分割每个字符，包括空格:\nvar str="How are you doing today?";\nvar n=str.split("");\nn 输出数组值得结果:\nH,o,w, ,a,r,e, ,y,o,u, ,d,o,i,n,g, ,t,o,d,a,y,?\n\n使用 limit 参数:\nvar str="How are you doing today?";\nvar n=str.split(" ",3);\nn 将输出3个数组的值:\nHow,are,you\n\n使用一个字符作为分隔符:\nvar str="How are you doing today?";\nvar n=str.split("o");\nn 输出数组值得结果:\nH,w are y,u d,ing t,day?\n')])])])])}),[],!1,null,null,null);e.default=n.exports}}]);