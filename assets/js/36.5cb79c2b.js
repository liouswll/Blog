(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{412:function(t,e,a){"use strict";a.r(e);var r=a(43),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"对象属性类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象属性类型"}},[t._v("#")]),t._v(" 对象属性类型")]),t._v(" "),a("h4",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("ul",[a("li",[t._v("Configurable：表示能否通过delete删除属性从而重新定义，"),a("strong",[t._v("能否修改属性特性")]),t._v("。默认为true")]),t._v(" "),a("li",[t._v("Enumerable：表示是否能够通过for-in循环返回属性。默认为true。")]),t._v(" "),a("li",[t._v("Writeable：表示能否修改属性的值。默认为true。")]),t._v(" "),a("li",[t._v("Value：属性的数据值，读取时从这取。写入时，把新值保存到这个位置。默认为undefined")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('使用Object.defineProperty()方法修改，接受三个参数。\nObject.defineProperty(属性所在的对象, 属性的名字, 一个描述符对象)\n\nvar person ={}\nObject.defineProperty(person, "name", {\n\twriteable: false,\n\tvalue: \'zx\'\n})\nconsole.log(person.name) // zx\nperson.name = "cy"\nconsole.log(person.name) // zx\n\nwriteable设置为false,修改值，非严格模式下赋值操作会被忽略。严格模式下报错。\nconfigurable设置为不可更改后,调用delete非严格模式下什么模式也不会发生。严格模式下报错。一旦设置为不可修改属性特性，就不能变回可配置。此时再修改writeable之外的特性，都会导致报错。\n')])])]),a("h4",{attrs:{id:"访问器属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问器属性"}},[t._v("#")]),t._v(" 访问器属性")]),t._v(" "),a("ul",[a("li",[t._v("Configurable：表示能否通过delete删除属性从而重新定义，能否修改器特性。默认为true")]),t._v(" "),a("li",[t._v("Enumerable：表示是否能够通过for-in循环返回属性。默认为true。")]),t._v(" "),a("li",[t._v("Get：读取数值时调用的函数，默认undefined")]),t._v(" "),a("li",[t._v("Set：写入属性时调用的函数，默认undefined")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var book = {\n\t_year: 2004,\n\tedition: 1\n};\nObject.defineProperty(book, "year", {\n\tget: function(){\n\t\treturn this._year\n\t},\n\tset: function(newValue){\n\t\tif(newValue > 2004){\n\t\t\tthis._year = newValue;\n\t\t\tthis.edition += newValue - 2004\t\n\t\t}\n\t}\n})\nbook.year = 2005;\nconsole.log(book.edition) // 2\t\n')])])]),a("h4",{attrs:{id:"定义多个属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义多个属性"}},[t._v("#")]),t._v(" 定义多个属性")]),t._v(" "),a("ul",[a("li",[t._v("Object.defineProperties() 可以定义多个属性，接受两个对象参数第一个"),a("strong",[t._v("对象是要添加或者修改的其属性的队象")]),t._v("，第二个"),a("strong",[t._v("对象的属性与第一个对象中要添加或者修改的属性一一对应")])])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var book ={}\nObjet.defineProperties(book, {\n\t_year: {\n\t\tvalue: 2004\n\t},\n\tedition: {\n\t\tvalue: 1\n\t}\n\tyear: {\n\t\tget: function(){\n\t\t\treturn this._year\n\t\t},\n\t\tset: fubction(){\n\t\t\tif(newValue>2004){\n\t\t\t\tthis._year = newValue;\n\t\t\t\tthis.edition += newValue-2004\n\t\t\t}\n\t\t}\n\t}\n})\n")])])]),a("h4",{attrs:{id:"读取属性的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读取属性的特性"}},[t._v("#")]),t._v(" 读取属性的特性")]),t._v(" "),a("ul",[a("li",[t._v("Object.getOwnPropertyDescriptor() 可以取得给给定属性的描述符。接受两个参数"),a("strong",[t._v("属性所在的对象，读取描述符的属性名称")]),t._v("分别是数据属性和访问器属性")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var book ={}\nObjet.defineProperties(book, {\n\t_year: {\n\t\tvalue: 2004\n\t},\n\tedition: {\n\t\tvalue: 1\n\t}\n\tyear: {\n\t\tget: function(){\n\t\t\treturn this._year\n\t\t},\n\t\tset: fubction(){\n\t\t\tif(newValue>2004){\n\t\t\t\tthis._year = newValue;\n\t\t\t\tthis.edition += newValue-2004\n\t\t\t}\n\t\t}\n\t}\n})\n\n// 数据属性\nvar descriptor = Objet.defineProperties(book, _year);\nalert(descriptor.value) //2014\nalert(descriptor.configgurale) // false\nalert(type descriptor.get) // underfined\n\n// 访问器属性\nvar descriptor = Objet.defineProperties(book, year);\nalert(descriptor.value) //undefined\nalert(descriptor.configgurale) // false\nalert(type descriptor.get) // function\n")])])]),a("h2",{attrs:{id:"基本要求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本要求"}},[t._v("#")]),t._v(" 基本要求")]),t._v(" "),a("ul",[a("li",[t._v("定义一个构造函数，创建自定义对象。")])]),t._v(" "),a("h2",{attrs:{id:"面向对象和基于对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和基于对象"}},[t._v("#")]),t._v(" 面向对象和基于对象")]),t._v(" "),a("ul",[a("li",[t._v("面向对象：可以创建自定义的类型、很好的支持继承和多态。面向对象的语言c++/java/c#...")])]),t._v(" "),a("blockquote",[a("p",[t._v("特征：封装、继承、多态"),a("br"),t._v("\n万物皆对象：世间的一切事物都可以用对象来描述")])]),t._v(" "),a("ul",[a("li",[t._v("基于对象：无法创建自定义的类型、不能很好的支持继承和多态。")])]),t._v(" "),a("blockquote",[a("p",[t._v("基于对象的语言,  比如:JavaScript")])]),t._v(" "),a("h2",{attrs:{id:"辨别js中的对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#辨别js中的对象"}},[t._v("#")]),t._v(" 辨别JS中的对象")]),t._v(" "),a("ul",[a("li",[t._v("除了5种基本的数据类型，其它的全都是对象。Object就是一个对象")])]),t._v(" "),a("h2",{attrs:{id:"使用对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用对象"}},[t._v("#")]),t._v(" 使用对象")]),t._v(" "),a("ul",[a("li",[t._v("对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('比如想要描述一个人? 如果使用基本数据类型的数据，我们所创建的变量都是独立，不能成为一个整体。\nvar name = "";\nvar intro = "";\nvar age = 108;\n')])])]),a("h2",{attrs:{id:"js中对象的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中对象的分类"}},[t._v("#")]),t._v(" JS中对象的分类")]),t._v(" "),a("h4",{attrs:{id:"内建对象：由es标准中定义的对象，在任何的es的实现中都可以使用。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内建对象：由es标准中定义的对象，在任何的es的实现中都可以使用。"}},[t._v("#")]),t._v(" 内建对象：由ES标准中定义的对象，在任何的ES的实现中都可以使用。")]),t._v(" "),a("ul",[a("li",[t._v("比如：String Number Boolean Function Object Math ....")])]),t._v(" "),a("h4",{attrs:{id:"宿主对象：由js的运行环境提供的对象，现在主要指由浏览器提供的对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宿主对象：由js的运行环境提供的对象，现在主要指由浏览器提供的对象"}},[t._v("#")]),t._v(" 宿主对象：由JS的运行环境提供的对象，现在主要指由浏览器提供的对象")]),t._v(" "),a("ul",[a("li",[t._v("比如: BOM对象, DOM对象")])]),t._v(" "),a("h4",{attrs:{id:"自定义对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义对象"}},[t._v("#")]),t._v(" 自定义对象")]),t._v(" "),a("ul",[a("li",[t._v("比如: Person, Dog, ....")])]),t._v(" "),a("h2",{attrs:{id:"如何创建对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何创建对象"}},[t._v("#")]),t._v(" 如何创建对象")]),t._v(" "),a("h4",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),a("ul",[a("li",[t._v("构造函数是专门用来创建对象的函数。使用new关键字调用的函数，可以被称为构造函数(constructor)"),a("br"),t._v(" "),a("code",[t._v("var obj = new Object();")])])]),t._v(" "),a("h4",{attrs:{id:"定义："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义："}},[t._v("#")]),t._v(" 定义：")]),t._v(" "),a("ul",[a("li",[t._v("在对象中保存的值称为属性")]),t._v(" "),a("li",[t._v("向对象添加属性: 对象.属性名 = 属性值;")]),t._v(" "),a("li",[t._v("读取对象中的属性: 对象.属性名")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果读取对象中没有的属性，不会报错而是会返回undefined")])]),t._v(" "),a("ul",[a("li",[t._v("修改对象的属性值: 对象.属性名 = 新值")]),t._v(" "),a("li",[t._v("删除对象的属性: delete 对象.属性名")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var obj = new Object();\n//向obj中添加一个name属性\nobj.name = "谢霆锋";\n//向obj中添加一个gender属性\nobj.gender = "男";\n//向obj中添加一个age属性\nobj.age = 38;\n')])])]),a("h2",{attrs:{id:"属性名和属性值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性名和属性值"}},[t._v("#")]),t._v(" 属性名和属性值")]),t._v(" "),a("p",[a("strong",[t._v('如果要使用特殊的属性名，不能采用.的方式来操作, 需要使用另一种方式, 语法: 对象["属性名"] = 属性值, 读取也要用该方式')])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('obj["666"] = 888;\nconsole.log(obj["666"]);\n\nvar str = \'666\';\nobj[str] = 888;\nconsole.log(obj[str]);\n')])])]),a("ul",[a("li",[t._v("JS对象的属性值，可以是任意的数据类型, 也可以是一个对象")])]),t._v(" "),a("h4",{attrs:{id:"in-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in-运算符"}},[t._v("#")]),t._v(" in 运算符")]),t._v(" "),a("ul",[a("li",[t._v("通过该运算符可以检查一个对象中是否含有指定的属性, 如果有则返回true，没有则返回false")])]),t._v(" "),a("blockquote",[a("p",[t._v('"属性名" in 对象')])]),t._v(" "),a("h2",{attrs:{id:"基本类型和引用类型在堆栈中的表示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和引用类型在堆栈中的表示"}},[t._v("#")]),t._v(" 基本类型和引用类型在堆栈中的表示")]),t._v(" "),a("h4",{attrs:{id:"基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),a("ul",[a("li",[t._v("String Number Boolean Null Undefined")])]),t._v(" "),a("h4",{attrs:{id:"引用数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用数据类型"}},[t._v("#")]),t._v(" 引用数据类型")]),t._v(" "),a("ul",[a("li",[t._v("Object")])]),t._v(" "),a("h4",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[t._v("#")]),t._v(" 区别")]),t._v(" "),a("ul",[a("li",[t._v("JS中的变量都是保存到栈内存中的，基本数据类型的值直接在栈内存中存储，值与值之间是独立存在，修改一个变量不会影响其他的变量")]),t._v(" "),a("li",[t._v("对象是保存到堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间，而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象引用，当一个通过一个变量修改属性时，另一个也会受到影响")])]),t._v(" "),a("blockquote",[a("p",[t._v("比较两个基本数据类型的值时，就是比较值。"),a("br"),t._v("\n比较两个引用数据类型时，它是比较的对象的内存地址，如果两个对象是一摸一样的，但是地址不同，它也会返回false")])]),t._v(" "),a("h2",{attrs:{id:"对象字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象字面量"}},[t._v("#")]),t._v(" 对象字面量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var 对象 = {属性名:属性值,属性名:属性值....};\n对象字面量的属性名可以加引号也可以不加，建议不加, 如果要使用一些特殊的名字，则必须加引号\n使用对象字面量，可以在创建对象时，直接指定对象中的属性\n属性名和属性值是一组一组的名值对结构，和值之间使用:连接，多个名值对之间使用,隔开\nvar obj = {\t\n\tname:"刘德华",\n\tage:50,\n\tgender:"男",\n\tfriend:{name:"洗头发"}\n\t};\t\nconsole.log(obj.friend);\n')])])])])}),[],!1,null,null,null);e.default=n.exports}}]);