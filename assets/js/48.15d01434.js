(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{446:function(e,t,n){"use strict";n.r(t);var a=n(43),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"vue2-x到vue3-x"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue2-x到vue3-x"}},[e._v("#")]),e._v(" vue2.x到vue3.x")]),e._v(" "),n("ol",[n("li",[e._v("Object.defineProperty => Proxy")]),e._v(" "),n("li",[e._v("重构了虚拟DOM")]),e._v(" "),n("li",[e._v("OptionApi => Composition API")])]),e._v(" "),n("h4",{attrs:{id:"双向绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定"}},[e._v("#")]),e._v(" 双向绑定")]),e._v(" "),n("ul",[n("li",[n("p",[n("strong",[e._v("vue2.x")]),e._v(" 通过Object.defineproperty重定义data中的属性get和set方法，从而劫持data中的set和get操作。存在问题：")]),e._v(" "),n("ol",[n("li",[e._v("实例创建后添加的属性监听不到，数据劫持是在数据初始化的过程中执行。具体在beforeCreate和Create生命周期内完成，可以通过$set解决后续天骄监听属性的问题。")]),e._v(" "),n("li",[e._v("defineProperty()无法监听数组的变化，当直接用index设置数组项是不会被检测出来的，如："),n("code",[e._v("this.showData[1] = {a:1}")]),e._v("。当然也能用$set解决。通过下面八种方法操作数组，Vue能检测到数据变化，分别为：push()、pop()、shift()、unshift()、splice()、sort()、reverse()")])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("vue3.x")]),e._v(" 采用Proxy和Reflect实现双向绑定，它在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。我们可以这样认为，Proxy是Object.defineProperty的全方位加强版。")]),e._v(" "),n("ol",[n("li",[e._v("Proxy有多达13种拦截方法,不限于apply、ownKeys、deleteProperty、has等等是Object.defineProperty不具备的。Object.defineProperty不能做的Proxy还能做。")]),e._v(" "),n("li",[e._v("Proxy作为新标准，得到了各大浏览器厂商的大力支持，性能持续优化。唯一的不足就是兼容性的问题，而且无法通过polyfill解决。")])])])]),e._v(" "),n("h2",{attrs:{id:"vue3-proxy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue3-proxy"}},[e._v("#")]),e._v(" vue3 Proxy")]),e._v(" "),n("ul",[n("li",[e._v("理解为在对象之前设置一个“拦截”，当该对象被访问的时候，都必须经过这层拦截。意味着你可以在这层拦截中进行各种操作。比如你可以在这层拦截中对原对象进行处理，返回你想返回的数据结构。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("- 基础\nconst p = new Proxy(target, handler);\ntarget： 所要拦截的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）\nhandler：一个对象，定义要拦截的行为\nconst p = new Proxy({}, {\n    get(target, propKey) {\n        return '哈哈，你被我拦截了';\n    }\n});\nconsole.log(p.name);\n// 哈哈，你被我拦截了\n\n\n- Proxy是用来操作对象的。代理的目的是为了拓展对象的能力。\nconst p = new Proxy({}, {\n    set(target, propKey, value) {\n        if (propKey === 'name') {\n            throw new TypeError('name属性不允许修改');\n        }\n        // 不是 name 属性，直接保存\n        target[propKey] = value;\n    }\n});\np.name = 'proxy';\n// TypeError: name属性不允许修改\np.a = 111;\nconsole.log(p.a); // 111\n")])])]),n("h2",{attrs:{id:"vue3-vue-set"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue3-vue-set"}},[e._v("#")]),e._v(" vue3 Vue.set")]),e._v(" "),n("ul",[n("li",[e._v("Vue.set( target, key, value )"),n("br"),e._v("\ntarget：要更改的数据源(可以是对象或者数组)"),n("br"),e._v("\nkey：要更改的具体数据"),n("br"),e._v("\nvalue ：重新赋的值")])]),e._v(" "),n("h2",{attrs:{id:"vue3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue3"}},[e._v("#")]),e._v(" vue3")]),e._v(" "),n("ul",[n("li",[e._v("示例 参考资料https://juejin.im/post/5e13ecbe6fb9a04846508ab2")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<body>\n    <div id="app"></div>\n</body>\n<script src="./index.js"><\/script>\n\n\nconst { reactive } = Vue\nvar App = {\n  template: `\n    <div class="container">\n         {{message}}\n    </div>`,\n  setup() {\n  \tconst state = reactive({message: "Hello World!!!"})\n\treturn {\n\t\t...state\n\t}\n  }\n}\nVue.createApp().mount(App, \'#app\')\n\n')])])]),n("ul",[n("li",[e._v("OptionApi => Composition API"),n("br"),e._v("\nsetup, reactive等函数")]),e._v(" "),n("li",[e._v("setup"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const { reactive } = Vue\nlet App = {\ntemplate: `\n    <div class="container">\n        <input v-model="state.value"/>{{state.value}}\n    </div>`,\nsetup() {\n    const state = reactive({ value: \'\' })\n    return { state }\n}\n}\nVue.createApp().mount(App, \'#app\')\n\n setup实际上是一个组件的入口，它运行在组件被实例化时候，props 属性被定义之后，实际上等价于 2 版本的beforeCreate 和 Created 这两个生命周期。\n\n setup接受两个参数，第一个参数是props， 另一个参数是context，所以大家在使用2.0时习惯的在this下获取属性的方式 ，在 vue3.0 中，变成了：\n setup(props, ctx) {\n    console.log(props, ctx)\n}\n\n- 传值\nlet Child = {\n    template: `<div>{{title}}</div>`,\n    setup(props, context) {\n        console.log(props)\n    }\n}\nlet App = {\n    template: `\n        <div class="container">\n            <Child title="test props"/>\n        </div>`,\n    components: { Child }\n}\nVue.createApp().mount(App, \'#app\')\n\n\n')])])])]),e._v(" "),n("li",[e._v("reactive"),n("br"),e._v("\n在Vue3中，我们可以把数据经过 reactive 加工变成响应式的对象，用于模版的渲染数据， 当然Vue的向下兼容 还是允许我们使用data的方式实现"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const { reactive, toRefs } = Vue\nlet App = {\ntemplate: `\n    <div class="container">\n        count: {{count}}\n        <button @click="handlerCountAdd"> Click ++ </button>\n    </div>`,\n    setup() {\n        const state = reactive({ count: 0 })\n        const handlerCountAdd = () => {\n            state.count++\n        }\n        return { ...toRefs(state), handlerCountAdd }\n    }\n}\nVue.createApp().mount(App, \'#app\')\n')])])])]),e._v(" "),n("li",[e._v("toRefs")])]),e._v(" "),n("ol",[n("li",[e._v("先说下 ref ，vue3提供的ref让我们有机会创建单个的响应式的对象，在setup函数中return出去之后，在模板中可直接访问"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const App = {\ntemplate: `\n    <div class=\"container\">\n        {{value}}     \n    </div>`,\nsetup() {\n    const value = ref(1)\n    return { value }\n}\n}\nVue.createApp().mount(App, '#app')\n")])])])]),e._v(" "),n("li",[e._v("那上文提到的 reactive创建的响应式对象 在模板中访问的话，则需要state.xxx。，vue3提供的toRefs正是为我们解决这个问题的，toRefs把一组的响应式对象拆成单个的响应式对象，就能够在模板中直接访问了。"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const App = {\ntemplate: `\n    <div class=\"container\">\n        {{value}}\n        // {{state.value}} 不使用toRefs\n    </div>`,\nsetup() {\n    const state = reactive({ value: 'reactive' })\n    return toRefs(state)\n}\n}\nVue.createApp().mount(App, '#app')\n")])])])])]),e._v(" "),n("ul",[n("li",[e._v("computed 计算属性")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("反转字符串 demo\nlet App = {\n  template: `\n    <div class=\"container\">\n        value: <input v-model=\"value\"/>\n        <br/>\n        rvalue: {{rvalue}}\n    </div>`,\n  setup() {\n    const state = reactive({\n      value: '',\n      rvalue: computed(() =>\n        state.value\n          .split('')\n          .reverse()\n          .join('')\n      )\n    })\n    return toRefs(state)\n  }\n}\nVue.createApp().mount(App, '#app')\n\n")])])]),n("ul",[n("li",[e._v("数据响应式 effect和watch\neffect和watch都可以监听到咱们数据的变化"),n("br"),e._v("\neffect 在响应式数据变化的时候就会执行，执行次数根据响应式数据的个数来决定"),n("br"),e._v("\nwatch则点击一次 ，只会触发执行一次")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let App = {\n  template: `\n    <div class=\"container\">\n        <button @click=\"handlerCountAdd\"> Click ++ </button>\n    </div>`,\n  setup() {\n    const state = reactive({ count: 0, value: 1 })\n    const r = ref(1)\n    const s = ref(1)\n    const t = ref(1)\n    const handlerCountAdd = () => {\n      r.value *= 1\n      s.value *= 2\n      t.value *= 3\n    }\n    watch([r, s, t], val => {\n      console.log('watch', val)\n    })\n    //effect(() => {\n    //  console.log('effect', [r.value, s.value, t.value])\n    //})\n    return { handlerCountAdd }\n  }\n}\nVue.createApp().mount(App, '#app')\n\n")])])]),n("h2",{attrs:{id:"生命周期对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期对比"}},[e._v("#")]),e._v(" 生命周期对比")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("vue2")]),e._v(" "),n("th",[e._v("vue3")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("beforeCreate")]),e._v(" "),n("td",[e._v("setup(替代)")])]),e._v(" "),n("tr",[n("td",[e._v("created")]),e._v(" "),n("td",[e._v("setup(替代)")])]),e._v(" "),n("tr",[n("td",[e._v("beforeMount")]),e._v(" "),n("td",[e._v("onBeforeMount")])]),e._v(" "),n("tr",[n("td",[e._v("mounted")]),e._v(" "),n("td",[e._v("onMounted")])]),e._v(" "),n("tr",[n("td",[e._v("beforeUpdate")]),e._v(" "),n("td",[e._v("onBeforeUpdate")])]),e._v(" "),n("tr",[n("td",[e._v("updated")]),e._v(" "),n("td",[e._v("onBeforeUpdate")])]),e._v(" "),n("tr",[n("td",[e._v("beforeDestroy")]),e._v(" "),n("td",[e._v("onUnmounted")])]),e._v(" "),n("tr",[n("td",[e._v("destroyed")]),e._v(" "),n("td",[e._v("onUnmounted")])]),e._v(" "),n("tr",[n("td",[e._v("errorCaptured")]),e._v(" "),n("td",[e._v("onErrorCaptured")])])])]),e._v(" "),n("h2",{attrs:{id:"vite"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vite"}},[e._v("#")]),e._v(" vite")]),e._v(" "),n("p",[n("code",[e._v("https://juejin.cn/post/6986899594491723806#heading-6")])])])}),[],!1,null,null,null);t.default=r.exports}}]);