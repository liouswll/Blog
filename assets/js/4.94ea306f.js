(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{400:function(e,t,n){e.exports=n.p+"assets/img/prototype.06d3c024.png"},401:function(e,t,n){e.exports=n.p+"assets/img/prototype2.55adfd44.png"},402:function(e,t,n){e.exports=n.p+"assets/img/buhuo.af7d6d08.png"},403:function(e,t,n){e.exports=n.p+"assets/img/maopao.b14a975a.png"},404:function(e,t,n){e.exports=n.p+"assets/img/chongPH.c68e4c3e.png"},405:function(e,t,n){e.exports=n.p+"assets/img/HC.c6d96332.png"},406:function(e,t,n){e.exports=n.p+"assets/img/304.130c3275.png"},407:function(e,t,n){e.exports=n.p+"assets/img/IEW3C.59956925.png"},422:function(e,t,n){"use strict";n.r(t);var a=n(43),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"_1-event事件绑定（监听事件）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-event事件绑定（监听事件）"}},[e._v("#")]),e._v(" 1. Event事件绑定（监听事件）")]),e._v(" "),a("ul",[a("li",[e._v("W3C规范中定义了3个事件阶段，依次是捕获阶段、目标阶段、冒泡阶段。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('element.addEventListener(event, function, useCapture)\n\n//event : （必需）事件名，支持所有DOM事件。\n\n//function：（必需）指定要事件触发时执行的函数。\n\n//useCapture：（可选）指定事件是否在捕获或冒泡阶段执行。true，捕获。false，冒泡。默认false。\n\n//注：IE8以下不支持。\n\n<input type="button" value="click me" id="btn1">\n\n<script>\ndocument.getElementById("btn1").addEventListener("click",hello);\nfunction hello(){\n    alert("hello world!");\n}\n<\/script>\n')])])]),a("ul",[a("li",[e._v("可以解除相应的绑定")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<input type="button" value="click me" id="btn5">\n\n<script>\nvar btn5 = document.getElementById("btn5");\nbtn5.addEventListener("click",hello1);//执行了\nbtn5.addEventListener("click",hello2);//不执行\nbtn5.removeEventListener("click",hello2);\n\nfunction hello1(){\n    alert("hello 1");\n}\nfunction hello2(){\n    alert("hello 2");\n}\n<\/script>\n\n')])])]),a("ul",[a("li",[e._v("IE")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('element.attachEvent(event, function)\n//event：（必需）事件类型。需加“on“，例如：onclick。\n \n//function：（必需）指定要事件触发时执行的函数。\n \n<input type="button" value="click me" id="btn2">\n \n<script>\ndocument.getElementById("btn2").attachEvent("onclick",hello);\nfunction hello(){\n    alert("hello world!");\n}\n<\/script>\n')])])]),a("h2",{attrs:{id:"_2-object-assign-object-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-object-assign-object-keys"}},[e._v("#")]),e._v(" 2. Object.assign() Object.keys()")]),e._v(" "),a("ol",[a("li",[e._v("方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。"),a("code",[e._v("Object.assign(target, ...sources)")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\n\nconst returnedTarget = Object.assign({可有默认值},target, source);\n// target目标对象。 sources源对象。\n\nconsole.log(target);\n// expected output: Object { a: 1, b: 4, c: 5 }\nconsole.log(returnedTarget);\n// expected output: Object { a: 1, b: 4, c: 5 }\n\n\nObject.assign(\n                        {}, \n                        this.state.params, \n                        { \n                            num: this.state.putInHighSeasonValue,\n                            classes: type,\n                            userId: userInfo.userId \n                        }\n                    )\n\n\n\n\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致 。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// simple array\nvar arr = ['a', 'b', 'c'];\nconsole.log(Object.keys(arr)); // console: ['0', '1', '2']\n\n// array like object\nvar obj = { 0: 'a', 1: 'b', 2: 'c' };\nconsole.log(Object.keys(obj)); // console: ['0', '1', '2']\n\n// array like object with random key ordering\nvar anObj = { 100: 'a', 2: 'b', 7: 'c' };\nconsole.log(Object.keys(anObj)); // console: ['2', '7', '100']\n")])])]),a("h2",{attrs:{id:"_3-instanceof，hasownproperty，in，isarray-for-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-instanceof，hasownproperty，in，isarray-for-in"}},[e._v("#")]),e._v(" 3. instanceof，hasOwnProperty，in，isArray, for-in")]),e._v(" "),a("ol",[a("li",[e._v("instanceof")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链。")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("运算符用来测试一个对象在其原型链中是否出现一个构造函数的 prototype 属性")])])]),e._v(" "),a("li",[a("p",[e._v("instanceof只适用于构造函数创建返回的复杂对象和实例。")])])]),e._v(" "),a("blockquote",[a("p",[e._v("任何时间判断一个对象（复杂值）是否是Object的实例时，它都将返回true，因为所有对象都继承自Object()构造函数。"),a("br"),e._v("\ninstanceof使用场景，判断在一个继承关系中实例是否属于它的父类。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 实例\nlet oSon = new oFather();\nconsole.log(oSon instanceof oFather); // true\n\n// 继承\nlet nFather = function () {};\nnFather.prototype = new oFather();\nnFather.construction = nFather;\nconsole.log(nFather.firstName); // undefined\nconsole.log(nFather.prototype.lastName); // qian\nconsole.log(nFather instanceof oFather); // false\nconsole.log(new nFather() instanceof nFather); // true\n\n// 相对于Object来说\nconsole.log('123' instanceof Object); // false\nconsole.log(new String('123') instanceof Object); // true 构造出来的实例\nconsole.log(null instanceof Object); // false\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("in, hasOwnProperty")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("in操作符可以检查一个对象的属性，包括来自原型链的属性")])]),e._v(" "),a("li",[a("p",[e._v("hasOwnProperty()方法可以检查来自非原型链属性的对象")])]),e._v(" "),a("li",[a("p",[e._v("实际项目中经常使用for...in...来遍历对象中可枚举的属性，但是for...in...常常把原型obj.prototype.xxx中的属性也列举出来，所以在循环的时候可以加上hasOwnProperty()方法判断下。")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function obj0 () {\n    this.name = 'mazey',\n    this.age = '24'\n};\nobj0.prototype.gender = 'male';\nlet obj1 = new obj0();\n\n// 打印所有可枚举属性\nfor (let key in obj1) {\n    console.log(key); // name age gender 从原型链上继承下来的属性也会被打印出来\n}\n\n// 过滤掉原型链上的属性\nfor (let key in obj1) {\n    if (obj1.hasOwnProperty(key)) {\n        console.log(key); // name age\n    }\n}\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("isArray")])]),e._v(" "),a("ul",[a("li",[e._v("isArray() 方法用于判断一个对象是否为数组，如果对象是数组返回 true，否则返回 false。")]),e._v(" "),a("li",[e._v("Array.isArray(obj)  // obj必需，要判断的对象。")])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[e._v("includes")])]),e._v(" "),a("ul",[a("li",[e._v("方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false")]),e._v(" "),a("li",[e._v("[1,2].includes(1)")])]),e._v(" "),a("h2",{attrs:{id:"_4-js阻止冒泡和取消默认事件-默认行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-js阻止冒泡和取消默认事件-默认行为"}},[e._v("#")]),e._v(" 4.JS阻止冒泡和取消默认事件(默认行为)")]),e._v(" "),a("ul",[a("li",[e._v("js冒泡和捕获是事件的两种行为，使用event.stopPropagation()起到阻止捕获和冒泡阶段中当前事件的进一步传播。")])]),e._v(" "),a("blockquote",[a("p",[e._v("w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var el = window.document.getElementById("a");\nel.onclick = function (e) {\n    //如果提供了事件对象，则这是一个非IE浏览器\n    if (e && e.stopPropagation) {\n        //因此它支持W3C的stopPropagation()方法\n        e.stopPropagation();\n    }\n    else {\n        //否则，我们需要使用IE的方式来取消事件冒泡 \n        window.event.cancelBubble = true;\n        return false;\n    }\n}\n')])])]),a("ul",[a("li",[e._v("使用event.preventDefault()可以取消默认事件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var el = window.document.getElementById("a");\nel.onclick = function (e) {\n    //如果提供了事件对象，则这是一个非IE浏览器\n    if (e && e.preventDefault) {\n        //阻止默认浏览器动作(W3C) \n        e.preventDefault();\n    }\n    else {\n        //IE中阻止函数器默认动作的方式 \n        window.event.returnValue = false;\n        return false;\n    }\n}\n')])])]),a("blockquote",[a("p",[e._v("冒泡事件：比如我们点击了一个元素然后从它本身开始一层一层向上的父元素都做出反应直到根元素"),a("br"),e._v("\n默认事件：像a标签的点击跳转和页面鼠标右键单击弹出菜单等都是默认事件")])]),e._v(" "),a("h2",{attrs:{id:"_5-分割子串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-分割子串"}},[e._v("#")]),e._v(" 5. 分割子串")]),e._v(" "),a("ul",[a("li",[e._v("不以使用正则表达式来替代子串，使用子串构建正则时，有可能有特殊字符")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const s = 'foo foo foo'\ns.replce(/foo/g, 'bar')\n\n\n// 期待结果: 'AhelloX hello3 '\n'hello. helloX hello3 '.replace(new RegExp('hello. ', 'g'), 'A')\n// 返回结果 \"AAA\"\n\n方法一\n'hello. hello. hello. '.split('hello. ').join('A')\n\"AAA\"\n\n方法二\nString.prototype.replaceAll()\n'aabbcc'.replaceAll('b', '.'); \n// 'aa..cc'\n")])])]),a("h2",{attrs:{id:"_6-eventloop-宏队列和微队列及其执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-eventloop-宏队列和微队列及其执行顺序"}},[e._v("#")]),e._v(" 6.EventLoop-宏队列和微队列及其执行顺序")]),e._v(" "),a("h4",{attrs:{id:"eventloop事件循环机制：-浏览器或者node的一种解决javascript单线程运行时不会阻塞的一种机制，也就是异步原理。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eventloop事件循环机制：-浏览器或者node的一种解决javascript单线程运行时不会阻塞的一种机制，也就是异步原理。"}},[e._v("#")]),e._v(" EventLoop事件循环机制： 浏览器或者node的一种解决JavaScript单线程运行时不会阻塞的一种机制，也就是异步原理。")]),e._v(" "),a("ul",[a("li",[e._v("宏任务队列可以有多个，微任务队列只有一个；主线程上的任务就是第一个宏任务，即刚进来时候的 script；")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("宏队列（macrotask，也叫tasks）：能够建立宏任务的有\nsetTimeout\nsetInterval \nsetImmediate (Node独有) \nrequestAnimationFrame (浏览器独有) \nI/O UI rendering (浏览器独有)。\n\n微队列（microtask，也叫jobs）： 能够建立微任务的有\nprocess.nextTick (Node独有) \nPromise \nObject.observe \nMutationObserve \n\n当有一个宏任务队列执行完毕后，会执行微任务队列中的全部内容，然后执行另一个宏任务，如此反复\n")])])]),a("ul",[a("li",[e._v("执行过程")])]),e._v(" "),a("ol",[a("li",[e._v("首先js会执行非异步操作的执行栈中的任务；")]),e._v(" "),a("li",[e._v("执行栈中所有任务全部执行完毕后会在宏队列(宏队列中的任务执行先进先出策略)中取出队列顶部的任务放到执行栈中；")]),e._v(" "),a("li",[e._v("在执行当前macrotask任务时，如果发现有microtask(微队列)，直接将任务放到微队列(微队列同样执行先进先出策略)中，等待当前宏队列任务执行完毕后执行。")]),e._v(" "),a("li",[e._v("执行完当前栈顶的宏队列任务后，不会接着执行下面的宏队列任务，而是接着执行微队列中的任务，直到所有微队列任务全部执行完毕，再执行下一个宏队列任务。")]),e._v(" "),a("li",[e._v("直到所有宏队列任务执行完毕，微队列任务执行完毕。")])]),e._v(" "),a("blockquote",[a("p",[e._v("marcotask 的本质是浏览器多个线程之间通信的一个消息队列；在 chrome 里，每个页面都对应一个进程，该进程又有多个线程，比如 js 线程、渲染线程、io 线程、网络线程、定时器线程等等，这些线程之间的通信是通过向对象的任务队列中添加一个任务（postTask） 来实现的；")])]),e._v(" "),a("blockquote",[a("p",[e._v("浏览器的各种线程都是常驻线程，他们运行在一个 for 死循环里面，每个线程都有属于自己的若干任务队列，线程自己或者其它线程都可能通过 postTask 向这些任务队列添加任务，这些线程会不断的从自己的任务队列中取出任务执行，或者把处于睡眠状态直到设定的时间或者是有人 postTask 的时候把它唤醒；")])]),e._v(" "),a("blockquote",[a("p",[e._v("microtask 是确确实实存在的一个队列，microtask 是属于当前线程的，而不是其他线程 postTask 过来的任务。只是延迟执行了而已，比如 Promise.then、mutationObserve 都属于这种情况；")])]),e._v(" "),a("h2",{attrs:{id:"_7-promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-promise"}},[e._v("#")]),e._v(" 7. Promise")]),e._v(" "),a("ol",[a("li")]),e._v(" "),a("ul",[a("li",[e._v("出现原因： 根据上一个请求执行下一步请求，产生回调地狱"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("请求1(function(请求结果1){\n    请求2(function(请求结果2){\n        请求3(function(请求结果3){\n            请求4(function(请求结果4){\n                请求5(function(请求结果5){\n                    请求6(function(请求结果3){\n                        ...\n                    })\n                })\n            })\n        })\n    })\n})\n")])])])]),e._v(" "),a("li",[e._v("缺点"),a("br"),e._v("\n代码臃肿。"),a("br"),e._v("\n可读性差。"),a("br"),e._v("\n耦合度过高，可维护性差。"),a("br"),e._v("\n代码复用性差。"),a("br"),e._v("\n容易滋生 bug。"),a("br"),e._v("\n只能在回调里处理异常")])]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li")]),e._v(" "),a("ul",[a("li",[e._v("Promise： 异步编程解决方案（ promise有三种状态：pending(等待态)，resolved（fulfiled）(成功态)，rejected(失败态)；状态一旦改变，就不会再变。创造promise实例后，它会立即执行。）")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new Promise(resolve => {\n  setTimeout(() => {\n    resolve('hello')\n  }, 2000)\n}).then(res => {\n  console.log(res)\n})\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new Promise(resolve => {\n    setTimeout(() => {\n      resolve('hello')\n    }, 2000)\n  }).then(val => {\n    console.log(val) //  参数val = 'hello'\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve('world')\n      }, 2000)\n    })\n  }).then(val => {\n    console.log(val) // 参数val = 'world'\n  })\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// promise完成后then()\nlet pro = new Promise(resolve => {\n   setTimeout(() => {\n     resolve('hello world')\n   }, 2000)\n })\n setTimeout(() => {\n   pro.then(value => {\n   console.log(value) // hello world\n })\n }, 2000)\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// Promise 状态的不可逆性\nvar p1 = new Promise(function(resolve, reject){\n  resolve("success1");\n  resolve("success2");\n});\n\nvar p2 = new Promise(function(resolve, reject){\n  resolve("success");\n  reject("reject");\n});\n\np1.then(function(value){\n  console.log(value);\n});\n\np2.then(function(value){\n  console.log(value);\n});\n\n输出 success1 success\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 链式调用\nvar p = new Promise(function(resolve, reject){\n  resolve(1);\n});\np.then(function(value){               //第一个then\n  console.log(value);\n  return value*2;\n}).then(function(value){              //第二个then\n  console.log(value);\n}).then(function(value){              //第三个then\n  console.log(value);\n  return Promise.resolve('resolve'); \n}).then(function(value){              //第四个then\n  console.log(value);\n  return Promise.reject('reject');\n}).then(function(value){              //第五个then\n  console.log('resolve: '+ value);\n}, function(err){\n  console.log('reject: ' + err);\n})\n打印\n1\n2\nundefined\n\"resolve\"\n\"reject: reject\"\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// then方法后接err   \npromiseDemo.then((result) => {\n  console.log(result)\n}, (result) => {\n  console.log(result)\n})\n\n// .catch  等价于上述的err\npromiseDemo.then((result) => {\n  console.log(result)\n}).catch((result) => {\n  console.log(result)\n})\n\npromiseDemo.then((result) => {\n  console.log(result)\n})   //只接收成功状态\npromiseDemo.catch((result) => {\n  console.log(result)\n})    // 只接收失败状态，可以看成第三种的简写形式\npromiseDemo.then(null, (result) => {\n  console.log(result)\n})   //只接收失败状态\n")])])]),a("ul",[a("li",[a("strong",[e._v("promise setTimeout（宏任务异步） console执行顺序")]),a("br"),e._v("\nconsole -> promise -> setTimeout")])]),e._v(" "),a("h2",{attrs:{id:"_8-axios请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-axios请求"}},[e._v("#")]),e._v(" 8. axios请求")]),e._v(" "),a("h4",{attrs:{id:"get请求-一般多用于获取数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get请求-一般多用于获取数据"}},[e._v("#")]),e._v(" get请求 一般多用于获取数据")]),e._v(" "),a("ul",[a("li",[e._v("不带参数")])]),e._v(" "),a("ol",[a("li",[e._v("方式一: axios({ methods: 'get', url: '/ulr' })")]),e._v(" "),a("li",[e._v("方式二: axios.get('/url')")])]),e._v(" "),a("ul",[a("li",[e._v("带参数"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1. 方式一: axios.get('/url', {params: {id: 12}})  //请求的地址实际为localhost:8080/url?id=12\n2. 方式二: axios({\n               methods: 'get',\n               url: 'url',\n               params: {\n                    id:12\n               }\n           })\n")])])])])]),e._v(" "),a("h4",{attrs:{id:"post请求-主要提交表单数据和上传文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post请求-主要提交表单数据和上传文件"}},[e._v("#")]),e._v(" post请求 主要提交表单数据和上传文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let data = {}\n方式一:  axios.post('/url',data,config)\n \n方式二:  axios({\n    methods: 'post',\n    url: '/url',\n    data: data,\n    \n    url: '连接地址 path参数直接放里面',\n    method: 'post 默认是 get',\n    params: '必须是一个无格式对象 query参数',\n    data: '是作为请求主体被发送的数据 body参数',\n\n})　　　　\n其中data可以有两种格式form-data(图片上传,文件上传)，applicition/json（目前比较流行）上面两种方法都是 appliction/json格式如下为: form-data\nlet formData = new FormData()\nlet data = {id: 12}\nfor (let key in data) {\n    formData.append(key, data[key]) //创建form-data格式数据\n}\naxios({\n    methods: 'post',\n    url: '/url',\n    data: formData\n})\n该请求发出之后可以在浏览器中查看此次请求的request header里面content-type: 为 form-data形式\n")])])]),a("ul",[a("li",[e._v("请求完成后可跟.then方法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("- get\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n- post\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });  \n")])])]),a("h2",{attrs:{id:"_9-polyfill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-polyfill"}},[e._v("#")]),e._v(" 9. polyfill")]),e._v(" "),a("ul",[a("li",[e._v("要抚平不同浏览器之间对js实现的差异。比如，html5的storage(session,local), 不同浏览器，不同版本，有些支持，有些不支持。")])]),e._v(" "),a("h2",{attrs:{id:"_10-node-gyp（工具包编译代码）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-node-gyp（工具包编译代码）"}},[e._v("#")]),e._v(" 10. node-gyp（工具包编译代码）")]),e._v(" "),a("p",[e._v("https://www.cnblogs.com/wangyuxue/p/11218113.html")]),e._v(" "),a("h2",{attrs:{id:"_11-防抖-节流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-防抖-节流"}},[e._v("#")]),e._v(" 11. 防抖-节流")]),e._v(" "),a("h4",{attrs:{id:"防抖-debounce-n秒内触发一次，如果再次触发，重新计时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防抖-debounce-n秒内触发一次，如果再次触发，重新计时"}},[e._v("#")]),e._v(" 防抖 debounce  ----n秒内触发一次，如果再次触发，重新计时")]),e._v(" "),a("ul",[a("li",[e._v("以免把一次事件误认为多次，敲键盘就是一个每天都会接触到的防抖操作。  n秒内触发一次，如果再次触发，重新计时")]),e._v(" "),a("li",[e._v("场景"),a("br"),e._v("\n登录、发短信等按钮避免用户点击太快，以致于发送了多次请求，需要防抖"),a("br"),e._v("\n调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖"),a("br"),e._v("\n文本编辑器实时保存，当无任何更改操作一秒后进行保存")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("「防抖重在清零 clearTimeout(timer)\n\nfunction debounce (f, wait) {\n  let timer\n  return (...args) => {\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      f(...args)\n    }, wait)\n  }\n}\n\n")])])]),a("h4",{attrs:{id:"节流-throttle-只在n秒内触发一次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节流-throttle-只在n秒内触发一次"}},[e._v("#")]),e._v(" 节流 throttle-----只在n秒内触发一次")]),e._v(" "),a("ul",[a("li",[e._v("控制事件发生的频率，如控制为1s发生一次，甚至1分钟发生一次。与服务端(server)及网关(gateway)控制的限流 (Rate Limit) 类  只在n秒内触发一次")]),e._v(" "),a("li",[e._v("场景"),a("br"),e._v("\nscroll 事件，每隔一秒计算一次位置信息等"),a("br"),e._v("\n浏览器播放事件，每个一秒计算一次进度信息等"),a("br"),e._v("\ninput 框实时搜索并发送请求展示下拉列表，没隔一秒发送一次请求 (也可做防抖)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("节流重在开关锁 timer=null\n\nfunction throttle (f, wait) {\n  let timer\n  return (...args) => {\n    if (timer) { return }\n    timer = setTimeout(() => {\n      f(...args)\n      timer = null\n    }, wait)\n  }\n}\n\n")])])]),a("h2",{attrs:{id:"_12-call-apply-bind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-call-apply-bind"}},[e._v("#")]),e._v(" 12. call-apply-bind")]),e._v(" "),a("h4",{attrs:{id:"作用："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用："}},[e._v("#")]),e._v(" 作用：")]),e._v(" "),a("p",[e._v("可以把方法借给其它对象使用，并且改变this的指向"),a("code",[e._v("a.apply(b,[3,2]);//")]),a("strong",[e._v("this指向由a变为b, a的方法借给b使用。")]),a("br"),e._v("\n在特定的作用域中调用函数，等于设置函数体内this对象的值，以扩充函数赖以运行的作用域")]),e._v(" "),a("h4",{attrs:{id:"接收参数不同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接收参数不同点"}},[e._v("#")]),e._v(" 接收参数不同点")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("apply()方法 接收两个参数，一个是函数运行的作用域（this），另一个是"),a("strong",[e._v("参数数组")]),e._v("。")])]),e._v(" "),a("li",[a("p",[e._v("语法： "),a("code",[e._v("apply([thisObj [,argArray] ])")]),e._v(";，调用一个对象的一个方法，2另一个对象替换当前对象。")])]),e._v(" "),a("li",[a("p",[e._v("call()方法 第一个参数和apply()方法的一样，但是"),a("strong",[e._v("传递给函数的参数必须列举出来")])])]),e._v(" "),a("li",[a("p",[e._v("语法：call([thisObject[,arg1 [,arg2 [,...,argn]]]]);，应用某一对象的一个方法，用另一个对象替换当前对象。")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function add(c,d){\n  return this.a + this.b + c + d;\n}\n\nvar s = {a:1, b:2};\nconsole.log(add.call(s,3,4)); // 1+2+3+4 = 10\nconsole.log(add.apply(s,[5,6])); // 1+2+5+6 = 14\n")])])]),a("p",[a("strong",[e._v("call和apply立即执行并且返回值是你调用的方法的返回值，若该方法没有返回值，则返回undefined。bind是改变this后返回一个新的函数，他不会立即执行。")])]),e._v(" "),a("ul",[a("li",[e._v("bind bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    var a ={\n        name : "Cherry",\n        fn : function (a,b) {\n            console.log( a + b)\n        }\n    }\n\n    var b = a.fn;\n    b.bind(a,1,2) // 无输出\n\n    b.bind(a,1,2)() // 3  bind 是创建一个新的函数，我们必须要手动去调用\n')])])]),a("h2",{attrs:{id:"_13-arguments-类数组对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-arguments-类数组对象"}},[e._v("#")]),e._v(" 13. arguments-类数组对象")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("函数的参数列表arguments是一个类数组对象，虽然它也有“下标”，但它并非真正的数组，所以也不能像数组一样，进行排序操作或者往集合里添加一个新的元素")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Array.prototype.slice.call(arguments,0)")]),e._v("就是arguments这个对象使用了数组的slice这个方法，得到了参数构成的数组（也可以用apply）。")])]),e._v(" "),a("li",[a("p",[e._v("这种情况下，我们常常会借用Array.prototype对象上的方法。比如想往arguments中添加一个新的元素，通常会借用Array.prototype.push：")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" (function () {\n            Array.prototype.push.call(arguments, 3);\n            console.log(arguments);\n            // 输出[1,2,3] \n \n})(1, 2);\n")])])]),a("h2",{attrs:{id:"_14-set和map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-set和map"}},[e._v("#")]),e._v(" 14. set和map")]),e._v(" "),a("ol",[a("li",[e._v("Set, 类似数组，成员值唯一。无重复的值。")]),e._v(" "),a("li",[e._v("生成set数据")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const s = new Set();\n[2, 2, 3, 5, 6, 7, 4, 3, 2].forEach(x => s.add(x));\nfor(let i of s) {\n  console.log(i)\n}\n// 2 5 6 7 4\n")])])]),a("ul",[a("li",[a("p",[e._v("Set 结构的实例有以下属性。"),a("br"),e._v("\nSet.prototype.constructor：构造函数，默认就是Set函数。"),a("br"),e._v("\nSet.prototype.size：返回Set实例的成员总数。")])]),e._v(" "),a("li",[a("p",[e._v("Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。下面先介绍四个操作方法。"),a("br"),e._v("\nSet.prototype.add(value)：添加某个值，返回 Set 结构本身。"),a("br"),e._v("\nSet.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。"),a("br"),e._v("\nSet.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。"),a("br"),e._v("\nSet.prototype.clear()：清除所有成员，没有返回值。")])]),e._v(" "),a("li",[a("p",[e._v("Set遍历"),a("br"),e._v("\nSet.prototype.keys()：返回键名的遍历器"),a("br"),e._v("\nSet.prototype.values()：返回键值的遍历器"),a("br"),e._v("\nSet.prototype.entries()：返回键值对的遍历器"),a("br"),e._v("\nSet.prototype.forEach()：使用回调函数遍历每个成员")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let set = new Set([\'red\', \'green\', \'blue\']);\n\nfor (let item of set.keys()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.values()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.entries()) {\n  console.log(item);\n}\n// ["red", "red"]\n// ["green", "green"]\n// ["blue", "blue"]\n\n\n\nlet set = new Set([1, 4, 9]);\nset.forEach((value, key) => console.log(key + \' : \' + value))\n// 1 : 1\n// 4 : 4\n// 9 : 9\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Map, JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const map = new Map([\n  ['name', '张三'],\n  ['title', 'Author']\n]);\n\nmap.size // 2\nmap.has('name') // true\nmap.get('name') // \"张三\"\nmap.has('title') // true\nmap.get('title') // \"Author\"\n")])])]),a("ul",[a("li",[e._v("属性"),a("br"),e._v("\nsize 属性")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const map = new Map();\nmap.set('foo', true);\nmap.set('bar', false);\n\nmap.size // 2\n")])])]),a("ul",[a("li",[a("p",[e._v("方法\nMap.prototype.set(key, value)"),a("br"),e._v("\nMap.prototype.get(key)"),a("br"),e._v("\nMap.prototype.has(key)"),a("br"),e._v("\nMap.prototype.delete(key)"),a("br"),e._v("\nMap.prototype.clear()")])]),e._v(" "),a("li",[a("p",[e._v("遍历"),a("br"),e._v("\nMap.prototype.keys()：返回键名的遍历器。"),a("br"),e._v("\nMap.prototype.values()：返回键值的遍历器。"),a("br"),e._v("\nMap.prototype.entries()：返回所有成员的遍历器。"),a("br"),e._v("\nMap.prototype.forEach()：遍历 Map 的所有成员。")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('const map = new Map([\n  [\'F\', \'no\'],\n  [\'T\',  \'yes\'],\n]);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n// "F"\n// "T"\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n// "no"\n// "yes"\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n// "F" "no"\n// "T" "yes"\n\n// 或者\nfor (let [key, value] of map.entries()) {\n  console.log(key, value);\n}\n// "F" "no"\n// "T" "yes"\n\n// 等同于使用map.entries()\nfor (let [key, value] of map) {\n  console.log(key, value);\n}\n// "F" "no"\n// "T" "yes"\n')])])]),a("h2",{attrs:{id:"_15-iterator-遍历器-和for-of循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-iterator-遍历器-和for-of循环"}},[e._v("#")]),e._v(" 15. Iterator(遍历器)和for-of循环")]),e._v(" "),a("h3",{attrs:{id:"iterator-遍历器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterator-遍历器"}},[e._v("#")]),e._v(" Iterator(遍历器)")]),e._v(" "),a("ol",[a("li",[a("p",[e._v('JS原有的表示"集合"的数据结构，主要是Array，Object，Es6添加了Map，Set。四种数据集合，可以组合使用，定义自己的数据结构。比如数组的成员是Map，Map的成员是对象。这样就需要一种统一的接口机制。来处理所有不同的数据结构。')])]),e._v(" "),a("li",[a("p",[e._v("遍历器(Iterator)就是这样一种机制。它是一种接口，为各种不同的数据提供统一的访问机制。任何数据只要部署Iterator接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）")])]),e._v(" "),a("li",[a("p",[e._v("Iterator的作用有三个：一是为各种数据结构，提供一个统一的，简单的访问接口。二是使的数据结构的成员能够按照某种次序排列。三是Es6创建了一种新的循环模式for-of，Iterator接口主要提供for-of消费。")])]),e._v(" "),a("li",[a("p",[e._v("工作原理：①创建一个空指针对象，指向数据起始的位置。②第一次调用next()方法，指针自动指向数据结构的第一个成员。③不断的调用next()方法，指针一直向后移，直到指向最后一个成员。④每调用next方法返回包括value和done对象，{value: 当前成员的值, done: 布尔值}")])])]),e._v(" "),a("blockquote",[a("p",[e._v("value表示当前成员的值，done对应的布尔值表示当前的数据的结构是否遍历结束。"),a("br"),e._v("\n当遍历结束的时候返回的value值是undefined，done值为false")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("模拟next()函数\nvar it = makeIterator(['a', 'b']);\n\nit.next() // { value: \"a\", done: false }\nit.next() // { value: \"b\", done: false }\nit.next() // { value: undefined, done: true }\n\nfunction makeIterator(array) {\n  var nextIndex = 0;\n  return {\n    next: function() {\n      return nextIndex < array.length ?\n        {value: array[nextIndex++], done: false} :\n        {value: undefined, done: true};\n    }\n  };\n}\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[e._v("默认的Iterator接口：ES6规定,默认的Iterator接口部署在数据结构的Symbol.iterator属性,或者说一个数据结构只要有Symbol.iterator属性就可以认为是可遍历的.Symbol.iterator属性本身是一个函数,就是当前数据结构默认的遍历器生成函数。")])]),e._v(" "),a("li",[a("p",[e._v("ES6的有些数据结构原生具备Iterator接口,比如数组,即不用任何处理就能被for…of循环遍历.对象没有Iterator接口。")])]),e._v(" "),a("li",[a("p",[e._v("原生具备Iterator接口的数据结构:"),a("strong",[e._v("Array,Map,Set,String,TypedArray,NodeList对象,函数的arguments对象")]),e._v("。")])]),e._v(" "),a("li",[a("p",[e._v("有了遍历器接口,数据结构就可以用for…of循环遍历")])])]),e._v(" "),a("blockquote",[a("p",[e._v("一个对象如果要具备可被for...of循环调用的 Iterator 接口，就必须在Symbol.iterator的属性上部署遍历器生成方法（原型链上的对象具有该方法）")])]),e._v(" "),a("h3",{attrs:{id:"调用iterator接口场合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用iterator接口场合"}},[e._v("#")]),e._v(" 调用Iterator接口场合")]),e._v(" "),a("ol",[a("li",[e._v("解构赋值")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let set = new Set().add('a').add('b').add('c');\n\nlet [x,y] = set;\n// x='a'; y='b'\n\nlet [first, ...rest] = set;\n// first='a'; rest=['b','c'];\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("扩展运算符")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 例一\nvar str = 'hello';\n[...str] //  ['h','e','l','l','o']\n\n// 例二\nlet arr = ['b', 'c'];\n['a', ...arr, 'd']\n// ['a', 'b', 'c', 'd']\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("yield* 后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let generator = function* () {\n  yield 1;\n  yield* [2,3,4];\n  yield 5;\n};\n\nvar iterator = generator();\n\niterator.next() // { value: 1, done: false }\niterator.next() // { value: 2, done: false }\niterator.next() // { value: 3, done: false }\niterator.next() // { value: 4, done: false }\niterator.next() // { value: 5, done: false }\niterator.next() // { value: undefined, done: true }\n")])])]),a("h3",{attrs:{id:"for-of"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-of"}},[e._v("#")]),e._v(" for-of")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('  for(let v of array) {  \n    console.log(v);  \n  };  \n  let s = "helloabc"; \n  for(let c of s) {  \n  console.log(c); \n}\n// h e l l o a b c\n\nfor in总是得到对像的key或数组,字符串的下标,而for of和forEach一样,是直接得到值 \n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Set和Map\n    var set = new Set();  \n    set.add("a").add("b").add("d").add("c");  \n    var map = new Map();  \n    map.set("a",1).set("b",2).set(999,3);  \n    for (let v of set) {  \n        console.log(v);  \n    }  \n    console.log("--------------------");  \n    for(let [k,v] of map) {  \n        console.log(k,v);  \n    }  \n    //a b c d\n    // a 1    b 2     999 3\n')])])]),a("h2",{attrs:{id:"_16-generator函数的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-generator函数的语法"}},[e._v("#")]),e._v(" 16. Generator函数的语法")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("其函数是ES6提供的一种异步编程解决方案。执行Generator函数会返回一个遍历器对象，也就是说除了状态机，还是一个遍历器对象生成函数。返回的遍历对象可一次遍历Generqtor函数内部的每一个状态。")])]),e._v(" "),a("li",[a("p",[e._v("Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function* helloWorldGenerator() {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n函数调用和普通函数没区别  加括号执行\n函数调用后，函数并不执行，执行返回不是函数运行结果，而是一个指向内部状态的指针对象。也就是iterator对象。\n\n使用next调用\nhw.next()\n// { value: 'hello', done: false }\n\nhw.next()\n// { value: 'world', done: false }\n\nhw.next()\n// { value: 'ending', done: true }\n\nhw.next()\n// { value: undefined, done: true }\n")])])]),a("h3",{attrs:{id:"yield表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield表达式"}},[e._v("#")]),e._v(" yield表达式")]),e._v(" "),a("ol",[a("li",[e._v("只有调用next方法才会遍历下一个内部状态。所以提供了一种可以暂停的执行的函数。yield表达式就是暂停标志yield后表达式返回的值，作为对象返回的value值。")]),e._v(" "),a("li",[e._v("yield执行下，如果没有遇到新的yield，就一直运算到函数结束。直到有return语句为止，")]),e._v(" "),a("li",[e._v("如果没有return语句，返回对象的value值为undefined。")]),e._v(" "),a("li",[e._v("generator函数可以不用yield表达式，这时变成了一个单纯的暂缓执行函数。")]),e._v(" "),a("li",[e._v("上述函数中，函数f如果是普通函数，在为变量generator赋值时就会执行。但是函数f是一个generator函数，只有在调用next方法时才会执行。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function* f() {\n  console.log('执行了！')\n}\n\nvar generator = f();\n\nsetTimeout(function () {\n  generator.next()\n}, 2000);\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[e._v("yield只能用在generator函数中使用，其他地方会报错。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(function (){\n  yield 1;\n})()\n// SyntaxError: Unexpected number\n")])])]),a("h2",{attrs:{id:"_17-next-的参数和iterator接口关系和for-of循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-next-的参数和iterator接口关系和for-of循环"}},[e._v("#")]),e._v(" 17. next()的参数和Iterator接口关系和for-of循环")]),e._v(" "),a("ol",[a("li",[e._v("next函数会携带一个参数，该参数会被当成上一个yield表达式的返回值。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function* f() {\n  for(var i = 0; true; i++) {\n    var reset = yield i;\n    if(reset) { i = -1; }\n  }\n}\n\nvar g = f();\n\ng.next() // { value: 0, done: false }\ng.next() // { value: 1, done: false }\ng.next(true) // { value: 0, done: false }\n\n代码定义了一个可以无限循环的generator函数f，如果next方法没有参数，每次运行到yield表达式，变量值为underfined。当next方法携带一个参数为true时，变量会被重置为true，i为1变为-1。\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("任意一个对象的Symbol.iterator方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的Symbol.iterator属性，从而使得该对象具有 Iterator 接口。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var myIterable = {};\nmyIterable[Symbol.iterator] = function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n};\n\n[...myIterable] // [1, 2, 3]\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("for-of循环\nfor-of可以自动遍历generator函数运行时生成的iterator对象，且此时不需要调用next方法。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function* foo() {\n  yield 1;\n  yield 2;\n  yield 3;\n  yield 4;\n  yield 5;\n  return 6;\n}\n\nfor (let v of foo()) {\n  console.log(v);\n}\n\n上面代码使用for...of循环，依次显示 5 个yield表达式的值。这里需要注意，一旦next方法的返回对象的done属性为true，for...of循环就会中止，且不包含该返回对象，所以上面代码的return语句返回的6，不包括在for...of循环之中\n")])])]),a("h2",{attrs:{id:"_18-array-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-array-from"}},[e._v("#")]),e._v(" 18. Array.from")]),e._v(" "),a("ul",[a("li",[e._v("Array.from() 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('console.log(Array.from(\'foo\'));\n// expected output: Array ["f", "o", "o"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n\n')])])]),a("h2",{attrs:{id:"_19-高阶函数和函数柯里化【手动实现map】【bind】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-高阶函数和函数柯里化【手动实现map】【bind】"}},[e._v("#")]),e._v(" 19. 高阶函数和函数柯里化【手动实现map】【bind】")]),e._v(" "),a("ol",[a("li",[e._v("高阶函数定义：接受函数作为参数或者返回函数的函数。常见的方法有map,filter,bind,apply。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("手动实现map `https://blog.csdn.net/Aiolimp/article/details/108313028`\n\n[1, 2, 3].map( item => item*2)   // [2, 4, 6]\nmap函数接受一个函数作为参数，返回一个新数组。\n\n①var fn = item => item*2;\n②Arr.prototype.MyMap = function(fn){\n  let arr = [];\n  for(var i = 0; i < this.length; i++){\n    arr.push(this[i], i, this)\n  }\n  return arr\n}\n\n测试\n[1, 2, 3].MyMap(item => item*2)  // [2, 4, 6] \n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("函数柯里化（curry）：是函数式标称里面的概念。把"),a("strong",[e._v("接受多个参数的函数换成接受单一参数（最初函数的第一个参数）的函数")]),e._v("，返回接受余下参数而且"),a("strong",[e._v("返回结果")]),e._v("的新函数。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("简单来说： 只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。\n\nconst add = (x, y, z) => x + y + z;\nadd(1, 2, 3);  // 6\n\nconst add = x => y => z => x+y+z\nadd(1)(2)(3)  // 6\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("作用：\n1. 函数复用\n// 正常正则验证字符串 reg.test(txt)\n// 函数封装后\nfunction check(reg, txt) {\n    return reg.test(txt)\n}\n\ncheck(/\\d+/g, 'test')       //false\ncheck(/[a-z]+/g, 'test')    //true\n\n// Currying后\nfunction curryingCheck(reg) {\n    return function(txt) {\n        return reg.test(txt)\n    }\n}\n\nvar hasNumber = curryingCheck(/\\d+/g)\nvar hasLetter = curryingCheck(/[a-z]+/g)\n\nhasNumber('test1')      // true\nhasNumber('testtest')   // false\nhasLetter('21212')      // false\n2. 延迟执行：不断的柯里化，累积传入的参数，最后执行。\n\n3. 提前把易变因素，传参固定下来，生成一个更明确的应用函数。最典型的代表应用，是bind函数用以固定this这个易变对象。\nFunction.prototype.bind = function(context) {\n    var _this = this,\n    _args = Array.prototype.slice.call(arguments, 1);\n    return function() {\n        return _this.apply(context, _args.concat(Array.prototype.slice.call(arguments)))\n    }\n}\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("函数柯里化（curry）面试题")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("再来看看之前的面试题：\n如何实现add(1)(2)(3)结果等于6?\n如果参数是100个呢，难道要写100次吗，如果参数是未知的呢，所以这个写法没有通用性。\n例如：\nadd(1)(2)(3)                \nadd(1, 2, 3)(4)           \nadd(1)(2)(3)(4)(5)          \nadd(2, 6)(1)\n\n\n\nfunction add() {\n    // 第一次执行时，定义一个数组专门用来存储所有的参数\n    var _args = Array.prototype.slice.call(arguments)\n\n    // 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值\n    var _adder = function() {\n        _args.push(...Array.from(arguments))\n        return _adder\n    };\n\n    // 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回\n    _adder.toString = function () {\n        return _args.reduce(function (a, b) {\n            return a + b;\n        })\n    }\n    return _adder;\n}\n测试：\nconsole.log(add(1)(2)(3))                // 6\nconsole.log(add(1, 2, 3)(4))             // 10\nconsole.log(add(1)(2)(3)(4)(5))          // 15\n\n注意：\n只有在对该函数取值时，才会进行类型转换，才会调用toString返回相加的值\n否则只是调用则返回函数而不是相加值\n\n")])])]),a("h2",{attrs:{id:"_20-箭头函数中this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-箭头函数中this"}},[e._v("#")]),e._v(" 20. 箭头函数中This")]),e._v(" "),a("ul",[a("li",[e._v("箭头函数的 this 始终指向"),a("strong",[e._v("函数定义时的 this，而非执行时")]),e._v("。箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。")])]),e._v(" "),a("h2",{attrs:{id:"_21-this指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-this指向"}},[e._v("#")]),e._v(" 21. this指向")]),e._v(" "),a("ol",[a("li",[e._v("当做普通函数执行，this指向window。（fn()）")]),e._v(" "),a("li",[e._v("new出来的对象，this指向了即将new出来的对象。")]),e._v(" "),a("li",[e._v("如果使用apply、call或者bind来调用一个函数，函数内部的this就将指向传入的第一个参数。（注：使用这几个方法可以改变this的指向）")]),e._v(" "),a("li",[e._v("如果函数被作为一个方法进行调用，比如：obj.method() --- 那么this就该函数的调用者。（这里是obj）")])]),e._v(" "),a("h2",{attrs:{id:"_22-原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-原型链"}},[e._v("#")]),e._v(" 22. 原型链")]),e._v(" "),a("ol",[a("li",[e._v("当调用某种方法或查找某种属性时，首先会在自身调用和查找，如果自身并没有该属性或方法，则会去它的__proto__属性中调用查找，也就是它构造函数的prototype中调用查找。\n"),a("img",{attrs:{src:n(400),alt:"prototype"}}),a("br"),e._v(" "),a("img",{attrs:{src:n(401),alt:"prototype2"}})])]),e._v(" "),a("h2",{attrs:{id:"_23-defer-async（无模块化）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-defer-async（无模块化）"}},[e._v("#")]),e._v(" 23. defer-async（无模块化）")]),e._v(" "),a("ol",[a("li",[e._v("引入js")]),e._v(" "),a("li",[e._v("缺点：①污染全局②不利于维护")]),e._v(" "),a("li",[e._v("defer：渲染完再执行。async：下载完就执行")])]),e._v(" "),a("h2",{attrs:{id:"_24-模块化（commonjs）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-模块化（commonjs）"}},[e._v("#")]),e._v(" 24. 模块化（commonJS）")]),e._v(" "),a("ol",[a("li",[e._v("commonJS一个模块化规范（nodeJS，webpack支持）。")]),e._v(" "),a("li",[e._v("定义：规定每一个文件就是一个模块，内部定义的变量属于这个模块。"),a("strong",[e._v("（不会外漏，污染全局变量）")])]),e._v(" "),a("li",[e._v("为模块化提供支持：moudle，exports，require，global。")]),e._v(" "),a("li",[e._v("对外输出"),a("strong",[e._v("moudle.export")]),e._v("，加载模块"),a("strong",[e._v("require")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("4.1\n// example.js\nvar x = 5;\nvar addX = function (value) {\n  return value + x;\n};\nmodule.exports = {\n  x: x,\n  addX: addX\n};\n\n// 引入\nvar example = require('./example.js');\nconsole.log(example.x); // 5\nconsole.log(example.addX(1)); // 6\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[e._v("特点：可以多次加载，第一次加载会缓存，以后加载会从缓存中取。要想让模块再次运行，必须清除缓存。")]),e._v(" "),a("li",[e._v("缺点：由于commonJS是同步加载模块，在服务器端，文件都是保存在硬盘上，所以同步加载没有问题，"),a("strong",[e._v("但是对于浏览器端，需要将文件从服务器端请求过来，那么同步加载就不适用了")]),e._v("，所以，CommonJS 是不适用于浏览器端的。")]),e._v(" "),a("li",[e._v("优点：CommonJS 规范在服务器端率先完成了 JavaScript 的模块化，"),a("strong",[e._v("解决了依赖、全局变量污染的问题")]),e._v("，这也是 js 运行在服务器端的必要条件。")])]),e._v(" "),a("h2",{attrs:{id:"_25-export-export-default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-export-export-default"}},[e._v("#")]),e._v(" 25. export-export default")]),e._v(" "),a("ol",{attrs:{start:"0"}},[a("li",[e._v("export与export default均可用于导出常量、函数、文件、模块等")]),e._v(" "),a("li",[e._v("在一个文件或模块中，export、import可以有多个，export default仅有一个")]),e._v(" "),a("li",[e._v("通过export方式导出，在导入时要加{ }，export default则不需要。使用export default命令，为模块指定默认输出，这样就不需要知道所要加载模块的变量名。")])]),e._v(" "),a("h2",{attrs:{id:"_26-模块化（es6）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-模块化（es6）"}},[e._v("#")]),e._v(" 26. 模块化（ES6）")]),e._v(" "),a("ol",[a("li",[e._v("导出模块"),a("strong",[e._v("export")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1.1 默认导出\n/******导出*****/\nexport default {\n    myFn(){\n        return "默认导出一个方法"\n    },\n    myName:"laowang"\n\n/**引入***/\nimport myObj from "./test.js";\nconsole.log(myObj.myFn(),myObj.myName);//默认导出一个方法 laowang\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("导入模块"),a("strong",[e._v("import")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('2.1  不想暴露名字可以用as\nlet myName="laowang";\nlet myAge=90;\nlet myfn=function(){\n    return "我是"+myName+"！今年"+myAge+"岁了"\n}\nexport {\n    myName as name,\n    myAge as age,\n    myfn as fn\n}\n/******************************接收的代码调整为**********************/\nimport {fn,age,name} from "./test.js";\nconsole.log(fn());//我是laowang！今年90岁了\nconsole.log(age);//90\nconsole.log(name);//laowang\n\n2.2 直接导入整个模块\nimport * as info from "./test.js";//通过*来批量接收，as 来指定接收的名字\nconsole.log(info.fn());//我是laowang！今年90岁了\nconsole.log(info.age);//90\nconsole.log(info.name);//laowang\n')])])]),a("h2",{attrs:{id:"_27-内存泄露-内存溢出-栈溢出-堆溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-内存泄露-内存溢出-栈溢出-堆溢出"}},[e._v("#")]),e._v(" 27. 内存泄露-内存溢出-栈溢出-堆溢出")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("内存泄漏（Memory Leak）是指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。")])]),e._v(" "),a("li",[a("p",[e._v("内存溢出(Out Of Memory，简称OOM)是指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存。此时程序就运行不了，系统会提示内存溢出，有时候会自动关闭软件，重启电脑或者软件后释放掉一部分内存又可以正常运行该软件，而由系统配置、数据流、用户代码等原因而导致的内存溢出错误，即使用户重新执行任务依然无法避免。")])]),e._v(" "),a("li",[a("p",[e._v("①栈溢出："),a("strong",[e._v("是缓冲区溢出的一种")]),e._v("。 由于缓冲区溢出而使得有用的存储单元被改写,往往会引发不可预料的后果。程序在运行过程中，为了临时存取数据的需要，一般都要分配一些内存空间，通常称这些空间为缓冲区。"),a("strong",[e._v("如果向缓冲区中写入超过其本身长度的数据，以致于缓冲区无法容纳，就会造成缓冲区以外的存储单元被改写，这种现象就称为缓冲区溢出")]),e._v("。缓冲区长度一般与用户自己定义的缓冲变量的类型有关。②"),a("strong",[e._v("栈溢出是由于C语言系列没有内置检查机制来确保复制到缓冲区的数据不得大于缓冲区的大小，因此当这个数据足够大的时候，将会溢出缓冲区的范围。")])])]),e._v(" "),a("li",[a("p",[e._v("堆溢出："),a("strong",[e._v("属于缓冲区溢出")]),e._v("。一旦程序确定，堆栈内存空间的大小就是固定的，当数据已经把堆栈的空间占满时，再往里面存放数据就会超出容量，发生上溢；当堆栈中的已经没有数据时，再取数据就无法取到了，发生下溢。需要注意的是，栈分为顺序栈和链栈，链栈不会发生溢出，顺序栈会发生溢出。")])])]),e._v(" "),a("h2",{attrs:{id:"_28-闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-闭包"}},[e._v("#")]),e._v(" 28. 闭包")]),e._v(" "),a("ol",[a("li",[e._v("函数可作为返回值，函数作为参数来传递。")]),e._v(" "),a("li",[e._v("优点：①变量常驻内存，对于实现某些业务很有帮助，比如计数器之类的②可以使函数外部访问函数内部变量③私有化，一定程度上解决了命名冲突，可以实现变量的私有化。")]),e._v(" "),a("li",[e._v("缺点：①1.闭包使函数中的变量都被保存在内存中，内存消耗很大，不能滥用闭包，否则会造成网页的性能问题，导致内存泄露（在IE中可能导致内存泄露）。解决方法是：在退出函数之前，将不使用的局部变量全部删除。②存在这样的可能，变量常驻在内存中，其占用内存无法被GC回收，导致内存溢出")]),e._v(" "),a("li",[e._v("this指向")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("谁调用this就是谁。如果在全局范围中，this就是window，如果在对象内部，this就指向这个对象。\nvar name = 'The window';\nvar obj={\n\tname: 'The Object',\n\tgetName: function(){\n\t    return function(){\n\t\t\t  return this.name;\n\t\t}\n\t}\n};\n一：\nconsole.log(obj.getName()())  // The Window\n二：\nvar myobj = obj.getName(); //myobj接收到匿名函数 function(){return this.name;}  \nConsole.log(myobj());  //  The Window  相当于 return window.name\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[e._v("闭包示例")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function foo(){\n            var a=20\n            function bar(){\n                a=a*2;\n                return a\n            }\n            return bar   //返回一个内嵌函数\n        }\n        var baz = foo()  //函数在外面调用，能访问的a变量,   函数运行在定义他们的作用域中\n                        //bar定义在foo中，就能访问foo定义的所有变量\n        console.log('111',baz)\n        console.log('222',baz()) //40\n        console.log('222',baz()) //80\n        console.log('222',baz())  //160\n\n        var baz2 = foo()\n        console.log('222',baz2()) //40\n")])])]),a("h2",{attrs:{id:"_29-event事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_29-event事件"}},[e._v("#")]),e._v(" 29. event事件")]),e._v(" "),a("ol",[a("li",[e._v("当一个事件发生时，和当前这个对象发生的这个事件有关的一些详细的信息都会临时保存到一个指定的地方--event对象，供我们在需要的时候调用")])]),e._v(" "),a("h2",{attrs:{id:"_30-事件流（捕获阶段-》目标阶段-》冒泡阶段）（事件捕获和事件冒泡的结合体）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-事件流（捕获阶段-》目标阶段-》冒泡阶段）（事件捕获和事件冒泡的结合体）"}},[e._v("#")]),e._v(" 30. 事件流（捕获阶段-》目标阶段-》冒泡阶段）（事件捕获和事件冒泡的结合体）")]),e._v(" "),a("ol",[a("li",[e._v("捕获阶段的处理函数最先执行，其次是目标阶段的处理函数，最后是冒泡阶段的处理函数。目标阶段的处理函数，先注册的先执行，后注册的后执行。")]),e._v(" "),a("li",[e._v("事件捕获：当一个元素接收到事件"),a("br"),e._v(" "),a("img",{attrs:{src:n(402),alt:"buhuo"}})]),e._v(" "),a("li",[e._v("事件冒泡：当一个元素接收到事件，会把他接收到的所有传播给他的父级"),a("br"),e._v(" "),a("img",{attrs:{src:n(403),alt:"maopao"}})])]),e._v(" "),a("h2",{attrs:{id:"_31-事件委托机制（事件代理）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-事件委托机制（事件代理）"}},[e._v("#")]),e._v(" 31. 事件委托机制（事件代理）")]),e._v(" "),a("ol",[a("li",[e._v("事件委托： 事件委托就是利用"),a("strong",[e._v("冒泡的原理")]),e._v("，把事件加到父元素或祖先元素上，触发执行效果。提高JavaScript性能。事件委托可以显著的提高事件的处理速度，减少内存的占用。")]),e._v(" "),a("li",[e._v("委托示例"),a("code",[e._v("https://blog.csdn.net/qq_27674439/article/details/100767050")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    <ul>\n      <li>1</li>\n      <li>2</li>\n      <li>3</li>\n    </ul>\n\n    <script>\n      var ul = documeng.getElementByTagName('ul')[0]\n\n      // 只给ul添加点击事件即可\n      ul.onClick = function(e){\n        e = e || window.event;\n\n        // 每个触发的事件里，通过事件对象.target能拿到触发事件的源头元素，也就是 事件源\n        // e.target代表被点击的的li\n        console.log(e.target.innerHTML)\n      }\n    <\/script>\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("添加点击事件 //需要给ul添加点击事件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    <input type='button' value='添加一个li' id='add' />\n    <ul>\n      <li>1</li>\n      <li>2</li>\n      <li>3</li>\n    </ul>\n\n    <script>\n      var ul = documeng.getElementByTagName('ul')[0]\n\n      // 只给ul添加点击事件\n      ul.onClick = function(e){\n        e = e || window.event;\n\n        // 判断事件源是不是li\n        if(e.target.nodeName.toLowerCase() == 'li' ){\n          alert(e.target.innerHTML)\n        }\n\n        // 给新增按钮添加点击事件\n        document.getElenentById('add').onClick = function(){\n          var li = document.createElement('li');\n          li.innerHTML = '我是新增的li';\n          ul.appendChild(li)\n        }\n      }\n    <\/script>\n")])])]),a("h2",{attrs:{id:"_32-blob对象（文件流下载）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_32-blob对象（文件流下载）"}},[e._v("#")]),e._v(" 32. Blob对象（文件流下载）")]),e._v(" "),a("p",[a("code",[e._v("https://www.cnblogs.com/hhhyaaon/p/5928152.html")]),e._v(" "),a("code",[e._v("https://juejin.im/post/6850037282691678221#heading-13")])]),e._v(" "),a("ol",[a("li",[e._v("Blob：表示二进制类型的对象。")]),e._v(" "),a("li",[e._v("Blob对象：Blob对象表示一个不可变，原始数据的"),a("strong",[e._v("类文件对象")]),e._v("。Blob表示的不一定是JavaScript原生格式的数据。"),a("strong",[e._v("File基于Blob")]),e._v("，继承了Blob的功能，"),a("strong",[e._v("将其扩展使它支持用户系统上的文件")]),e._v("。")]),e._v(" "),a("li",[e._v("语法：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var aBlob = new Blob(array, options)\n\narray是一个有ArrayBuffer, ArrayBufferView, Blob, DOMString 等构成的Array, 或者其他类似的对象混合体，它将会被放进Blob。DOMStrings会被编码为UTF-8。\n\noptions 是一个可选BlobPropertyBag字典，有两个属性：\n1. type：默认为" "，代表被放进Blob数组中的内容MIME类型。type: "text/xml"  type: "text/plain"\n2. endings：用于指定包含行结束符 \\n 的字符如何被写入。它是下面两个值中的一个：\n  ① "native": 代表行结束符会被更改为适合宿主操作系统文件系统的换行符\n  ② "transparent": 默认值，代表会保持blob中保存的结束符不变\n\n构造函数\nvar debug = {hello: "world"};\nvar blob = new Blob([JSON.stringify(debug)], {type : \'application/json\'});\n\n生成的对象如下\nBlob {\n  size: 17\n  type: "application/json"\n  __proto__: Blob\n}\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("属性：①Blob.size，只读，对象中多包含数据的大小（字节为单位） ②Blob.type，只读，字符串，表明Blob对象所包含数据的MIME类型。如果是位置，则为空字符串。")])]),e._v(" "),a("blockquote",[a("p",[e._v("MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。")])]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[e._v("方法：")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1.\nslice() 方法用于创建一个包含源 Blob的指定字节范围内的数据的新 Blob 对象\n\nBlob.slice(start:number, end:number, contentType:string)\nstart：开始索引，默认为0\nend：截取结束索引（不包括end）\ncontentType：新Blob的MIME类型，默认为空字符串\n\nvar blob = new Blob([\'asdasasdasdasd\'], {type: "text/plain"});\nblob.slice(0, 5, type: "text/plain")   // Blob{size: 5, type: "text/plain"}\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("2.\nstream() 返回一个ReadableStream对象，读取它将返回包含在Blob中的数据。\nvar stream = blob.stream();\n\nReadableStream：ReadableStream 接口呈现了一个可读取的二进制流操作。Fetch API 通过Response的属性 body提供了一个具体的 ReadableStream 对象。\n\n构造函数：\nReadableStream()\n创建并从给定的Handler返回一个可读流对象\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("3.\ntext() 返回一个 Promise 对象且包含 blob 所有内容的 UTF-8 格式的 USVString。\n\nUSVString：返回一个 Promise 对象且包含 blob 所有内容的二进制格式的 ArrayBuffer。除了不允许不成对的代理代码之外， USVString 等同于 DOMString。\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("4.\narrayBuffer() 返回一个 Promise 对象且包含 blob 所有内容的二进制格式的 ArrayBuffer。\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[e._v("分段上传")]),e._v(" "),a("li",[e._v("存储下载数据（通过URL下载文件）")]),e._v(" "),a("li",[e._v("blob复制粘贴")])]),e._v(" "),a("h2",{attrs:{id:"_33-a标签下载（文件下载）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_33-a标签下载（文件下载）"}},[e._v("#")]),e._v(" 33. a标签下载（文件下载）")]),e._v(" "),a("ol",[a("li",[a("code",[e._v('<a href="/i/w3school_logo_white.gif" download="w3logo">')])])]),e._v(" "),a("h2",{attrs:{id:"_34-浏览器渲染的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_34-浏览器渲染的过程"}},[e._v("#")]),e._v(" 34. 浏览器渲染的过程")]),e._v(" "),a("ol",[a("li",[e._v("HTML和CSS各自解析，生成DOM树和CSSOM树")]),e._v(" "),a("li",[e._v("合并为渲染树")]),e._v(" "),a("li",[e._v("根据渲染树进行布局")]),e._v(" "),a("li",[e._v("最后调用GPU进行绘制，显示")])]),e._v(" "),a("h2",{attrs:{id:"_35-重排（回流）和重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_35-重排（回流）和重绘"}},[e._v("#")]),e._v(" 35. 重排（回流）和重绘")]),e._v(" "),a("h4",{attrs:{id:"重排（回流）：当元素的尺寸或者位置发生变化，需要重新计算渲染树。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重排（回流）：当元素的尺寸或者位置发生变化，需要重新计算渲染树。"}},[e._v("#")]),e._v(" 重排（回流）：当元素的尺寸或者位置发生变化，需要重新计算渲染树。")]),e._v(" "),a("ol",[a("li",[e._v("DOM的几何属性发生变化（height, width, padding, margin, border）")]),e._v(" "),a("li",[e._v("DOM元素的移动")]),e._v(" "),a("li",[e._v("读写offset, scroll, client等属性出发回流")]),e._v(" "),a("li",[e._v("调用window.getComputedStyle会出发回流")])]),e._v(" "),a("h4",{attrs:{id:"重绘：dom的样式发生变化，但没有影响dom的几何属性。重绘由于dom位置信息不需要更新，省去布局过程，因性能上优于回流。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重绘：dom的样式发生变化，但没有影响dom的几何属性。重绘由于dom位置信息不需要更新，省去布局过程，因性能上优于回流。"}},[e._v("#")]),e._v(" 重绘：DOM的样式发生变化，但没有影响DOM的几何属性。重绘由于DOM位置信息不需要更新，省去布局过程，因性能上优于回流。")]),e._v(" "),a("ol",[a("li",[e._v("DOM样式发生变化")])]),e._v(" "),a("p",[a("img",{attrs:{src:n(404),alt:"chongPH"}})]),e._v(" "),a("h2",{attrs:{id:"_36-浏览器缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_36-浏览器缓存"}},[e._v("#")]),e._v(" 36. 浏览器缓存")]),e._v(" "),a("p",[a("code",[e._v("https://blog.csdn.net/woleigequshawanyier/article/details/86152516")]),e._v(" "),a("code",[e._v("https://www.jianshu.com/p/54cc04190252")])]),e._v(" "),a("blockquote",[a("p",[e._v("Service Worker ：和Web Worker类似，是独立的线程，我们可以在这个线程中缓存文件，在主线程需要的时候读取这里的文件，Service Worker使我们可以自由选择缓存哪些文件以及文件的匹配、读取规则，并且缓存是持续性的。"),a("br"),e._v("\nMemory Cache（内存缓存）：即内存缓存，内存缓存不是持续性的，缓存会随着进程释放而释放"),a("br"),e._v("\nDisk Cache（硬盘缓存）：即硬盘缓存，相较于内存缓存，硬盘缓存的持续性和容量更优，它会根据HTTP header的字段判断哪些资源需要缓存"),a("br"),e._v("\nPush Cache（推送缓存）：即推送缓存，是HTTP/2的内容，目前应用较少"),a("br"),e._v("\n以上缓存都没命中就会进行网络请求")])]),e._v(" "),a("p",[a("img",{attrs:{src:n(405),alt:"HC"}})]),e._v(" "),a("h4",{attrs:{id:"强缓存（优先级较高，在命中强缓存失败的情况下，才会走协商缓存）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存（优先级较高，在命中强缓存失败的情况下，才会走协商缓存）"}},[e._v("#")]),e._v(" 强缓存（优先级较高，在命中强缓存失败的情况下，才会走协商缓存）")]),e._v(" "),a("ol",[a("li",[e._v("利用http头中的"),a("strong",[e._v("Expires")]),e._v("和"),a("strong",[e._v("Cache-Control")]),e._v("两个字段控制。强缓存中，当请求再次发生时，浏览器会根据其中的expires和cache-control判断资源是否命中强缓存。若命中直接从缓存中获取资源，不会再与服务端发生通信。")]),e._v(" "),a("li",[e._v("http1.0")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("当服务器返回响应时，在 Response Headers 中将过期时间写入 expires 字段\nexpires: Wed, 11 Sep 2019 16:12:18 GMT\n\nexpires 是一个时间戳，接下来如果我们试图再次向服务器请求资源。\n浏览器就会先对比本地时间和 expires 的时间戳，如果本地时间小于 expires 设定的过期时间，那么就直接去缓存中取这个资源。\n\n问题：对“本地时间”的依赖。（修改客户端时间）\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("http1.1")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.\nCache-Control 可以视作是 expires 的完全替代方案。在当下的前端实践里，我们继续使用 expires 的唯一目的就是向下兼容\n\n2.\nCache-Control 中，我们通过 max-age 来控制资源的有效期。max-age 不是一个时间戳，而是一个时间长度。\ncache-control: max-age=31536000\n它意味着该资源在 31536000 秒以内都是有效的，完美地规避了时间戳带来的潜在问题。\n\n3.\ns-maxage 就是用于表示 cache 服务器上（比如 cache CDN）的缓存的有效时间的，并只对 public 缓存有效。\ns-maxage仅在代理服务器中生效，客户端中我们只考虑max-age。\ncache-control: max-age=3600, s-maxage=31536000\n同时出现s-maxage优先级高\n\n4.\nno-store与no-cache\nno-cache 绕开了浏览器：我们为资源设置了 no-cache 后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期（即走我们下文即将讲解的协商缓存的路线）。\n\nno-store 比较绝情，顾名思义就是不使用任何缓存策略。在 no-cache 的基础上，它连服务端的缓存确认也绕开了，只允许你直接向服务端发送请求、并下载完整的响应。\n\n")])])]),a("h4",{attrs:{id:"public-private"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-private"}},[e._v("#")]),e._v(" public private")]),e._v(" "),a("ol",[a("li",[e._v("public 与 private 是针对资源是否能够被代理服务缓存而存在的一组对立概念。")]),e._v(" "),a("li",[e._v("为资源设置了 public，那么它既可以被浏览器缓存，也可以被代理服务器缓存")]),e._v(" "),a("li",[e._v("设置了 private，则该资源只能被浏览器缓存")])]),e._v(" "),a("h4",{attrs:{id:"协商缓存：协商缓存依赖于服务端与浏览器之间的通信。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存：协商缓存依赖于服务端与浏览器之间的通信。"}},[e._v("#")]),e._v(" 协商缓存：协商缓存依赖于服务端与浏览器之间的通信。")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。")])]),e._v(" "),a("li",[a("p",[e._v("如果服务端提示缓存资源未改动（Not Modified），资源会被重定向到浏览器缓存，这种情况下网络请求对应的状态码是 304（如下图）。\n"),a("img",{attrs:{src:n(406),alt:"304"}})])]),e._v(" "),a("li",[a("p",[e._v("协商缓存的实现：从 Last-Modified 到 Etag")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1. \nLast-Modified 是一个时间戳，如果我们启用了协商缓存，它会在首次请求时随着 Response Headers 返回： Last-Modified: Fri, 27 Oct 2017 06:35:57 GMT\n\n2. \n随后我们每次请求时，会带上一个叫 If-Modified-Since 的时间戳字段。\n它的值正是上一次 response 返回给它的 last-modified 值：If-Modified-Since: Fri, 27 Oct 2017 06:35:57 GMT\n\n3. \n服务器接收到这个时间戳后，会比对该时间戳和资源在服务器上的最后修改时间是否一致，从而判断资源是否发生了变化。如果发生了变化，就会返回一个完整的响应内容，并在 Response Headers 中添加新的 Last-Modified 值；否则，返回如上图的 304 响应，Response Headers 不会再添加 Last-Modified 字段。\n\n问题：\n我们编辑了文件，但文件的内容没有改变。服务端并不清楚我们是否真正改变了文件，它仍然通过最后编辑时间进行判断。因此这个资源在再次被请求时，会被当做新资源，进而引发一次完整的响应——不该重新请求的时候，也会重新请求。\n\n当我们修改文件的速度过快时（比如花了 100ms 完成了改动），由于 If-Modified-Since 只能检查到以秒为最小计量单位的时间差，所以它是感知不到这个改动的——该重新请求的时候，反而没有重新请求了。\n\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("为了解决这样的问题，Etag 作为 Last-Modified 的补充出现了。")])]),e._v(" "),a("blockquote",[a("p",[e._v("Etag 是由服务器为每个资源生成的唯一的标识字符串，这个标识字符串是基于文件内容编码的，只要文件内容不同，它们对应的 Etag 就是不同的，反之亦然。因此 Etag 能够精准地感知文件的变化。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1.\n首次请求响应头里获取到一个最初的标识符字符串：ETag: W/"2a3b-1602480f459"\n\n下一次请求时，请求头里就会带上一个值相同的、名为 if-None-Match 的字符串供服务端比对了：If-None-Match: W/"2a3b-1602480f459"\n\n2.\nEtag 在感知文件变化上比 Last-Modified 更加准确，优先级也更高。当 Etag 和 Last-Modified 同时存在时，以 Etag 为准\n\n弊端：Etag 的生成过程需要服务器额外付出开销，会影响服务端的性能。\n')])])]),a("h2",{attrs:{id:"_37-盒模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_37-盒模型"}},[e._v("#")]),e._v(" 37. 盒模型")]),e._v(" "),a("p",[a("img",{attrs:{src:n(407),alt:"IEW3C"}})]),e._v(" "),a("h4",{attrs:{id:"标准盒模型（w3c盒模型）：范围包括margin，border，padding，content。并且content部分不包含其他部分。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标准盒模型（w3c盒模型）：范围包括margin，border，padding，content。并且content部分不包含其他部分。"}},[e._v("#")]),e._v(" 标准盒模型（W3C盒模型）：范围包括margin，border，padding，content。并且content部分不包含其他部分。")]),e._v(" "),a("ol",[a("li",[e._v("标准盒模型的content范围内的高度和宽度是不变的，padding和border是在content的范围外进行增加，将盒模型撑大。content范围内的大小始终不变。刚好对应上标准盒模型的名称content-box。    box-sizing: content-box;")])]),e._v(" "),a("h4",{attrs:{id:"ie盒模型：范围包括margin，border，padding，content。但是content部分包含border，padding。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ie盒模型：范围包括margin，border，padding，content。但是content部分包含border，padding。"}},[e._v("#")]),e._v(" IE盒模型：范围包括margin，border，padding，content。但是content部分包含border，padding。")]),e._v(" "),a("ol",[a("li",[e._v("怪异盒模型的border范围内的高度和大小是不变的，padding和border是在border范围内进行增加，会压缩content大小，border范围内的大小始终不变。刚好对应上怪异盒模型的名称border-box。     box-sizing: border-box;")])]),e._v(" "),a("blockquote",[a("p",[e._v("box-sizing:inherit\t 规定应从父元素继承 box-sizing 属性的值。")])]),e._v(" "),a("h2",{attrs:{id:"_38-实现只执行一次的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_38-实现只执行一次的函数"}},[e._v("#")]),e._v(" 38. 实现只执行一次的函数")]),e._v(" "),a("ol",[a("li",[e._v("只会执行一次")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function once (fn) {\n  let called = false\n  return function () {\n    if (!called) {\n      called = true\n      fn.apply(this, arguments)\n    }\n  }\n}\n\n\nfunction test() {\n  console.log('执行成功');\n}\nconst executeOnce = once(test)\nexecuteOnce()\n// 执行成功\nexecuteOnce()\n// undefined\n\n")])])]),a("h2",{attrs:{id:"_39-url输入到结束过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_39-url输入到结束过程"}},[e._v("#")]),e._v(" 39 url输入到结束过程")]),e._v(" "),a("ol",{attrs:{start:"0"}},[a("li",[a("code",[e._v("https://juejin.im/post/6881603705548832775#heading-10")]),e._v(" "),a("code",[e._v("https://juejin.cn/post/6844904054074654728")]),e._v("（侧重）   掘金")]),e._v(" "),a("li",[e._v("url解析")]),e._v(" "),a("li",[e._v("DNS域名解析")])]),e._v(" "),a("ul",[a("li",[e._v("缓存")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1. 从浏览器获取缓存\n2. 浏览器没有，从本地系统的缓存中读取，比如host文件等。（平常github慢的话会修改host文件，配置一个快一点的ip）\n3. 路由器\n4. 开始解析。本地域名服务器->根域名服务器 ->（没有）-> 本地域名服务器 -> com顶级域名服务器发送请求  \n   直到找到目标网址的ip，并缓存下来\n")])])]),a("ul",[a("li",[e._v("DNS重定向")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("DNS每次返回的ip地址可能不一样，有很多机器可以处理如'baidu.com'这个请求。DNS只需要返回可以处理的机器ip地址就可以了。\n\n可以根据每台机器的负载量，与用户的距离，这中过程就是DNS负载均衡，又叫做DNS重定向。\n")])])]),a("ul",[a("li",[e._v("DNS污染")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("域名服务器缓存投毒（DNS cache poisoning）， 是指一些刻意制造或无意中制造出来的域名服务器数据包， 把域名指往不正确的IP地址。\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("TCP连接  https://zhuanlan.zhihu.com/p/102698413")])]),e._v(" "),a("ul",[a("li",[e._v("三次握手")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.客户端发出连接请求报文\n2.TCP服务器收到请求报文后，如果同意连接，则发出确认报文\n3.TCP客户进程收到确认后，还要向服务器给出确认\n\n  客户端–发送带有SYN标志的数据包–一次握手–服务端\n  服务端–发送带有SYN/ACK标志的数据包–二次握手–客户端\n  客户端–发送带有带有ACK标志的数据包–三次握手–服务端\n")])])]),a("ul",[a("li",[e._v("四次挥手")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("客户端进程发出连接释放报文，并且停止发送数据。（向服务端）\n\n服务器收到连接释放报文，向客户端发出确认报文，服务端就进入了CLOSE-WAIT（关闭等待）\n\n客户端收到确认报文，继续等待服务器发出连接释放报文-关闭与客户端的连接，发送一个FIN给客户端\n\n客户端收到连接释放报文并将确认序号设置为收到序号加1（发回ACK报文确认）,并发出确认给服务端，服务端进入close\n")])])]),a("ul",[a("li",[e._v("UDP")])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("p",[e._v("SSL/TLS加密")])]),e._v(" "),a("li",[a("p",[e._v("HTTP请求")])]),e._v(" "),a("li",[a("p",[e._v("断开TCP连接")])]),e._v(" "),a("li",[a("p",[e._v("浏览器渲染页面")])]),e._v(" "),a("li",[a("p",[e._v("总结")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("URL解析\nDNS解析\n建立连接\n如果有加密的话要先解密\n然后http请求获取资源\n断开连接\n得到资源之后如果有gzip压缩要先解压\n然后先构建DOM树，CSS树。下载JS文件，然后下载图片。然后生成Render树，最后确定布局，GPU绘制。\n")])])]),a("h2",{attrs:{id:"_40-浅拷贝深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_40-浅拷贝深拷贝"}},[e._v("#")]),e._v(" 40. 浅拷贝深拷贝")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("简单数据类型，存储在栈空间中，存储的是一个值；如果是复杂数据类型，存储在堆空间中，存储的是一个引用。正是这种存储方式的差异，导致了浅拷贝和深拷贝的区别。")])]),e._v(" "),a("li",[a("p",[e._v("浅拷贝：如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以修改新拷贝的对象会影响原对象。")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let obj = {\n    id:1,\n    info:{\n        name:"hello",\n        age:24\n    }\n}\nlet obj2 = obj; // 赋值就是一个浅拷贝\nobj2.id = 3;\nconsole.log(obj.id);   // 3\n\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("深拷贝：将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。"),a("strong",[e._v("序列化与反序列化")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let obj = {\n    id:1,\n    info:{\n        name:"hello",\n        age:24\n    }\n}\nlet obj2 = JSON.parse(JSON.stringify(obj)); // 这里实现深拷贝 序列化与反序列化\nobj2.id = 3;\nobj2.info.name = "刘亦菲";\nconsole.log(obj.id);   // 1\nconsole.log(obj.info.name);   // hello\n\n')])])]),a("blockquote",[a("p",[a("strong",[e._v("SON.parse(JSON.stringify)实现了一个深拷贝。这就是日常开发中使用较为频繁的一个深拷贝方法，它可以实现一些不是那么复杂的数据类型的深拷贝。不支持函数，undefined，Date，RegExp")]),e._v("。")])]),e._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[e._v("递归克隆实现一个深拷贝")])]),e._v(" "),a("blockquote",[a("p",[a("strong",[e._v("https://juejin.im/post/6889327058158092302#heading-5")])])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// 递归深拷贝对象\nfunction deepClone(target){\n  if(target instanceof Object){\n      let dist = {};\n      for(let key in target){\n        // 递归调用自己获取到每个值\n          dist[key] = deepClone(target[key]);\n      }\n      return dist;\n  }else{\n      return target;\n  }\n}\n\nlet obj1 = {\n  name:"hello",\n  child:{\n    name:"小明"\n  }\n}\nlet obj2 = deepClone(obj1);\nconsole.log(obj2 !== obj1);                         // true\nconsole.log(obj2.name === obj1.name);               // true\nconsole.log(obj2.child !== obj1.child);             // true\nconsole.log(obj2.child.name === obj1.child.name);   // true\nobj2.name = "World";\nconsole.log(obj1.name === \'hello\');                 // true\n\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 递归循环求和\n//for 循环写法：\n    var sum=0;\n    for (var i=0;i<=5;i++){\n        sum+=i;\n    }\n    console.log(sum);\n----------------------分割线---------------------------\n\n   function getSum(x) {\n        if (x==1){\n          return 1\n        }\n        return x+getSum(x-1);\n    };\n\n    var sum1=getSum(5);\n    console.log(sum1);\n    console.log(getSum(10));\n")])])]),a("blockquote",[a("p",[e._v("代码执行getSum(5)—>进入函数,此时的x是5,执行的是5+getSum(4),此时代码等待\n此时5+getSum(4),代码先不进行计算,先执行getSum(4),进入函数,执行的是4+getSum(3),等待, 先执行的是getSum(3),进入函数,执行3+getSum(2),等待,先执行getSum(2),进入函数,执行 2+getSum(1);等待, 先执行getSum(1),执行的是x==1的判断,return 1,所以,\n此时getSum(1)的结果是1,开始向外走出去\n2+getSum(1) 此时的结果是:2+1")])]),e._v(" "),a("h2",{attrs:{id:"_41-对象-数组互换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_41-对象-数组互换"}},[e._v("#")]),e._v(" 41. 对象-数组互换")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('结构\nautoPublishDate: {workDay: "1", weekend: "1", statutoryHoliday: "1"}\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("对象->数组\nconst autoPublishArr = [];\nconst autoPublishDate = dataSource && dataSource.autoPublishDate;\nfor( let key in autoPublishDate) {\n  if(autoPublishDate[key] == 1) {\n    autoPublishArr.push(key)   \n  }\n}   \n// [1, 1, 1]     \n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("数组->对象\nconst autoPublishDate = {\n                workDay: 0,\n                weekend: 0,\n                statutoryHoliday: 0\n            };\nvalues.autoPublishDate.map( item => {\n                autoPublishDate[item] = 1\n            })\nvalues.autoPublishDate = autoPublishDate;\n// {}\n")])])]),a("h2",{attrs:{id:"_42-数组去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_42-数组去重"}},[e._v("#")]),e._v(" 42. 数组去重")]),e._v(" "),a("p",[a("code",[e._v("https://segmentfault.com/a/1190000016418021?utm_source=tag-newest")])]),e._v(" "),a("h2",{attrs:{id:"_43-函数什么情况下-必须使用箭头函数或者bind绑定this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_43-函数什么情况下-必须使用箭头函数或者bind绑定this"}},[e._v("#")]),e._v(" 43. 函数什么情况下 必须使用箭头函数或者bind绑定this")]),e._v(" "),a("p",[a("code",[e._v("https://blog.csdn.net/qq_34829447/article/details/81705977")])]),e._v(" "),a("h2",{attrs:{id:"_44-ref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_44-ref"}},[e._v("#")]),e._v(" 44. Ref")]),e._v(" "),a("p",[a("code",[e._v("https://juejin.cn/post/6985425164976521253?from=right_recommend#heading-11")])]),e._v(" "),a("h2",{attrs:{id:"_45-异步方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_45-异步方法"}},[e._v("#")]),e._v(" 45. 异步方法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("handleSave = () => {\n        return new Promise((r,j) => {\n            console.log(this.planInfo)\n            const { reviewNo, dataDeil } = this.state\n            const { dispatch } = this.props\n\n            const creditScore = this.planInfo && this.planInfo.props && this.planInfo.props.creditScore || dataDeil && dataDeil.baseInfo.creditScore || ''\n            const regu = /^[1-9]\\d*|0$/\n            if (creditScore && (!regu.test(creditScore))) return message.warn('请填写正确的芝麻信用分')\n\n            dispatch({\n                type: 'reviewRisk/handSaveCreditScore',\n                payload: {\n                    reviewNo: reviewNo,\n                    creditScore: this.planInfo && this.planInfo.props && this.planInfo.props.creditScore || dataDeil && dataDeil.baseInfo.creditScore || ''\n                },\n                callback: (res) => {\n                    message.success('芝麻信用分保存成功')\n                    dispatch({\n                        type: 'reviewRisk/handSaveTemp',\n                        payload: {\n                            reviewNo: reviewNo,\n                            reviewStep: 40,\n                            remark: this.planInfo && this.planInfo.props && this.planInfo.props.manualRecheckInfo || dataDeil && dataDeil.manualRecheckInfo.remark || ''\n                        },\n                        callback: (res) => {\n                            message.success('备注保存成功')\n                            r();\n                        }\n                    })\n                }\n            })\n            this.setState({ btnSaveLoading: true })\n            setTimeout(() => { this.setState({ btnSaveLoading: false }) }, 3000);\n        });\n\n    }\n\n\n\nhandleOnSubmitClick = async () => {\n        const { dataDeil } = this.state\n        if (this.state.showModal == '') return message.warn('请选择提交类型')\n        if ((this.planInfo && this.planInfo.props && this.planInfo.props.creditScore || dataDeil && dataDeil.baseInfo.creditScore) && (this.planInfo && this.planInfo.props && this.planInfo.props.manualRecheckInfo || dataDeil && dataDeil.manualRecheckInfo.remark)) {\n            await this.handleSave()\n            if (this.state.showModal == '1') {\n                this.child.handleSureClick()\n            }\n            if (this.state.showModal == '2') {\n                this.child.handleSureClick()\n            }\n            this.setState({ btnLoading: true })\n            setTimeout(() => { this.setState({ btnLoading: false }) }, 3000);\n        } else {\n            message.warn('芝麻分和备注不能为空')\n        }\n    }\n")])])]),a("h2",{attrs:{id:"_46-jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_46-jsonp"}},[e._v("#")]),e._v(" 46 JSONP")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\n//动态创建 script\nvar script = document.createElement('script');\n\n// 设置回调函数\nfunction getData(data) {\n    console.log(data);\n}\n\n//设置 script 的 src 属性，并设置请求地址\nscript.src = 'http://localhost:3000/?callback=getData';\n\n// 让 script 生效\ndocument.body.appendChild(script);\n\n\nhttps://coding.imooc.com/learn/questiondetail/197438.html \nJSONP发起的请求会默认设置一个名字为getData 的回调函数。这就要求后端返回的内容要是getData({result: 0, data: 1572409891, msg: “成功”}) 包裹的格式\n")])])]),a("h2",{attrs:{id:"_47-跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_47-跨域"}},[e._v("#")]),e._v(" 47 跨域")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.domain 基础域名相同 子域名不同\n\n\nwindow.name 利用在一个浏览器窗口内，载入所有的域名都是共享一个window.name\n\n\nCORS(Cross-origin resource sharing)跨域资源共享 服务器设置对CORS的支持原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求\n\n\nproxy代理 目前常用方式,通过服务器设置代理\n\n\nwindow.postMessage() 利用h5新特性window.postMessage()\n\n")])])]),a("h2",{attrs:{id:"_48-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_48-cookie"}},[e._v("#")]),e._v(" 48 cookie")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('document.cookie = "name=value;expires=date日期";\n\n\nhttps://www.jb51.net/article/61512.htm\n')])])]),a("h2",{attrs:{id:"_49-全局弹窗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_49-全局弹窗"}},[e._v("#")]),e._v(" 49 全局弹窗")]),e._v(" "),a("p",[a("code",[e._v("https://juejin.cn/post/7076288644016766984#heading-0")])]),e._v(" "),a("h2",{attrs:{id:"_50-hash和history区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_50-hash和history区别"}},[e._v("#")]),e._v(" 50 hash和history区别")]),e._v(" "),a("p",[a("code",[e._v("https://juejin.cn/post/7029246706638127117")]),e._v("\nhash模式 window.onhashchange 方法监听路由\nhistory模式 通过pushState replaceState方式修改路由的改变")]),e._v(" "),a("h2",{attrs:{id:"_51-前端的权限管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_51-前端的权限管理"}},[e._v("#")]),e._v(" 51 前端的权限管理")]),e._v(" "),a("p",[a("code",[e._v("https://blog.csdn.net/weixin_40599109/article/details/113728974")])])])}),[],!1,null,null,null);t.default=s.exports}}]);