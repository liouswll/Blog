(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{411:function(n,e,t){"use strict";t.r(e);var s=t(43),a=Object(s.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"constructor和super"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#constructor和super"}},[n._v("#")]),n._v(" constructor和super")]),n._v(" "),t("ol",[t("li",[n._v("constructor 构造方法，这是ES6对类的默认方法，通过new命令生成对象实例时自动调用该方法。并且，该方法是类中必须有的，如果没有显式定义，则会默认添加空的constructor()方法。")]),n._v(" "),t("li",[n._v("super 继承，在class方法中，继承是使用 extends 关键字来实现的。子类必须在 constructor()中调用 super()方法，否则新建实例时会报错。")])]),n._v(" "),t("blockquote",[t("p",[n._v("报错的原因是：子类是没有自己的this对象的，它只能继承自父类的this对象，然后对其进行加工，而super()就是将父类中的this对象继承给子类的。没有super，子类就得不到this对象。")])]),n._v(" "),t("blockquote",[t("p",[n._v("简单解释，就是在ES5的继承中，先创建子类的实例对象this，然后再将父类的方法添加到this上（ Parent.apply(this) ）。而ES6采用的是先创建父类的实例this（故要先调用super()方法），完后再用子类的构造函数修改this。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class A {\n  constructor() {\n    console.log(new.target.name); // new.target 指向当前正在执行的函数\n  }\n}\n \nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n \nnew A(); // A\nnew B(); // B\n\n-----------------------------------------------------\nclass Person {\n    constructor(name, age){\n        this.name  = name;\n        this.age = age;\n    }\n    showName(){\n        console.log(this.name)\n    }\n    showAge(){\n        console.log(this.age)\n    }\n    static add(x, y){\n        return x + y\n    }\n}\n\nclass Student extends Person {\n    constructor(name, age, career){\n        super(name, age)\n        this.career = career\n    }\n    showCareer(){\n        console.log(this.career)\n    }\n}\n\nlet ts = new Student('z', 12, 'x')\nts.showAge()\nts.showName()\nts.showCareer()\n")])])]),t("h2",{attrs:{id:"object-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-assign"}},[n._v("#")]),n._v(" Object.assign")]),n._v(" "),t("ol",[t("li",[n._v("方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。"),t("code",[n._v("Object.assign(target, ...sources)")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\n\nconst returnedTarget = Object.assign(target, source);\n// target目标对象。 sources源对象。\n\nconsole.log(target);\n// expected output: Object { a: 1, b: 4, c: 5 }\nconsole.log(returnedTarget);\n// expected output: Object { a: 1, b: 4, c: 5 }\n")])])]),t("h2",{attrs:{id:"asycn-await-建立于promise之上-换句话来说使用了generator函数做了语法糖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#asycn-await-建立于promise之上-换句话来说使用了generator函数做了语法糖"}},[n._v("#")]),n._v(" asycn-await 建立于Promise之上,换句话来说使用了Generator函数做了语法糖")]),n._v(" "),t("ol",[t("li",[n._v("async顾名思义是“异步”的意思，async用于声明一个函数是异步的。而await从字面意思上是“等待”的意思，就是用于等待异步完成。并且await只能在async函数中使用。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('function a (){\n    setTimeout(() => {\n        alert("我是后弹出");\n    },1000)\n}\nfunction b (){\n    alsert("我是先弹出");\n}\nfunction * grenDome (){\n    yield a();\n    yield b();\n}\nlet gren = grenDome();\ngren.next();\ngren.next();\n// 我是先弹出\n// 我是后弹出\n---------------------------------------------------\nfunction a (){\n    setTimeout(() => {\n        alert("我是后弹出");\n    },1000)\n}\nfunction b (){\n    alsert("我是先弹出");\n}\nasync function grenDome (){\n    await a();\n    await b();\n}\nlet gren = grenDome();\n// 我是先弹出\n// 我是后弹出\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);