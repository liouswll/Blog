(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{393:function(e,a,t){e.exports=t.p+"assets/img/vHtml.6cd3990f.png"},426:function(e,a,t){"use strict";t.r(a);var n=t(43),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),n("ul",[n("li",[e._v("概念：构建用户界面的渐进式框架")]),e._v(" "),n("li",[e._v("声明式渲染")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("声明式渲染数据\n<div id=\"app\">\n  {{ message }}\n</div>\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})\n")])])]),n("ul",[n("li",[e._v('绑定元素attribute v-bind:title="message"')]),e._v(" "),n("li",[e._v("条件与循环\n"),n("ol",[n("li",[e._v('切换元素是否显示：v-if="seen"')]),e._v(" "),n("li",[e._v('循环数组：v-for="todo in todos"')]),e._v(" "),n("li",[e._v("处理用户输入"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('时间监听器（调用vue中的方法）\n    v-on:click="reverseMessage"\n双向绑定\n    v-model="message"\n')])])])]),e._v(" "),n("li",[e._v("组件化应用构建\ncomponent注册组件\nv-bind 指令将待办项传到循环输出的每个组件中")])])])]),e._v(" "),n("h2",{attrs:{id:"vue实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue实例"}},[e._v("#")]),e._v(" vue实例")]),e._v(" "),n("h4",{attrs:{id:"创建vue实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建vue实例"}},[e._v("#")]),e._v(" 创建vue实例")]),e._v(" "),n("ul",[n("li",[e._v("var vm = new Vue({})")])]),e._v(" "),n("h4",{attrs:{id:"数据方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据方法"}},[e._v("#")]),e._v(" 数据方法")]),e._v(" "),n("ul",[n("li",[e._v("数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时就已经存在于 data 中的属性才是响应式的")]),e._v(" "),n("li",[e._v("使用 Object.freeze()，这会阻止修改现有的属性，也意味着响应系统无法再追踪变化。Object.freeze(obj)")])]),e._v(" "),n("h4",{attrs:{id:"vue-实例属性与方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-实例属性与方法"}},[e._v("#")]),e._v(" Vue 实例属性与方法")]),e._v(" "),n("ul",[n("li",[e._v("有前缀 $，以便与用户定义的属性区分开来"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1. \n$data   $el\n// $watch 是一个实例方法\n2. \nvm.$watch('a', function (newValue, oldValue) {\n// 这个回调将在 `vm.a` 改变后调用\n})\n")])])])])]),e._v(" "),n("h4",{attrs:{id:"实例生命周期钩子"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例生命周期钩子"}},[e._v("#")]),e._v(" 实例生命周期钩子")]),e._v(" "),n("ul",[n("li",[e._v("初始化过程，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。")]),e._v(" "),n("li",[e._v("生命周期钩子的 this 上下文指向调用它的 Vue 实例。不要在选项属性或回调上使用箭头函数，")])]),e._v(" "),n("blockquote",[n("p",[e._v("比如 created: () => console.log(this.a) 或 vm.$watch('a', newValue => this.myMethod())。因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。")])]),e._v(" "),n("h4",{attrs:{id:"生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),n("ul",[n("li",[e._v("生命周期"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("beforeCreated：el 和 data 并未初始化\n\ncreated:完成了 data 数据的初始化，el没有\n\nbeforeMount：完成了 el 和 data 初始化   虚拟DOM占位\n\nmounted ：完成挂载\n\nbeforeUpdate\n\nupdated\n\nbeforeDestroy\n    钩子函数在实例销毁之前调用。在这一步，实例仍然完全可用\n\ndestroyed\n\t钩子函数在Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n")])])])]),e._v(" "),n("li",[e._v("编译加载顺序： render函数选项 > template选项 > outer HTML"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<body>\n<div id=\"app\">\n    \x3c!--html中修改的--\x3e\n    <h1>{{message + '这是在outer HTML中的'}}</h1>\n</div>\n</body>\n<script>\nvar vm = new Vue({\n    el: '#app',\n    template: \"<h1>{{message +'这是在template中的'}}</h1>\", //在vue配置项中修改的\n    data: {\n    message: 'Vue的生命周期'\n    }\n<\/script>\n    ew Vue({\n    el: '#app',\n    render: function(createElement) {\n        return createElement('h1', 'this is createElement')\n    }\n})\n")])])])])]),e._v(" "),n("h2",{attrs:{id:"模板语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板语法"}},[e._v("#")]),e._v(" 模板语法")]),e._v(" "),n("ul",[n("li",[e._v("插值\n"),n("ol",[n("li",[e._v("v-once\n一次性的插值，当数据改变时，插值处的内容不会更新"),n("br"),e._v(" "),n("code",[e._v("<span v-once>这个将不会改变: "+e._s(e.msg)+"</span>")])]),e._v(" "),n("li",[e._v("v-html\n输出HTML代码"),n("br"),e._v(" "),n("img",{attrs:{src:t(393),alt:"vHtml"}})]),e._v(" "),n("li",[e._v("attribute")]),e._v(" "),n("li",[e._v("JavaScript表达式： 表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\x3c!-- 这是语句，不是表达式 --\x3e\n{{ var a = 1 }}\n\n\x3c!-- 流控制也不会生效，请使用三元表达式 --\x3e\n{{ if (ok) { return message } }}\n")])])])])])]),e._v(" "),n("li",[e._v("指令\n"),n("ol",[n("li",[e._v("参数\n"),n("blockquote",[n("p",[e._v("一些指令接受一个参数，在指令之后用冒号表示"),n("br"),e._v(" "),n("code",[e._v('v-bind:href="url"')]),e._v(" "),n("code",[e._v('<a v-on:click="doSomething">...</a>')])])])]),e._v(" "),n("li",[e._v("动态参数\n"),n("blockquote",[n("p",[n("code",[e._v('<a v-bind:[attributeName]="url"> ... </a>')]),n("br"),e._v('\n如果你的 Vue 实例有一个 data 属性 attributeName，其值为 "href"，那么这个绑定将等价于 v-bind:href。')])])]),e._v(" "),n("li",[e._v("修饰符\n"),n("blockquote",[n("p",[n("code",[e._v('<form v-on:submit.prevent="onSubmit">...</form>')]),n("br"),e._v("\n修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()")])])])])]),e._v(" "),n("li",[e._v("缩写")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('v-bind\n\x3c!-- 完整语法 --\x3e\n<a v-bind:href="url">...</a>\n\n\x3c!-- 缩写 --\x3e\n<a :href="url">...</a>\n\n\x3c!-- 动态参数的缩写 (2.6.0+) --\x3e\n<a :[key]="url"> ... </a>\n\n\nv-on\n\x3c!-- 完整语法 --\x3e\n<a v-on:click="doSomething">...</a>\n\n\x3c!-- 缩写 --\x3e\n<a @click="doSomething">...</a>\n\n\x3c!-- 动态参数的缩写 (2.6.0+) --\x3e\n<a @[event]="doSomething"> ... </a>\n')])])]),n("h2",{attrs:{id:"计算属性与侦听器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#计算属性与侦听器"}},[e._v("#")]),e._v(" 计算属性与侦听器")]),e._v(" "),n("ul",[n("li",[e._v("计算属性computed：")])]),e._v(" "),n("ol",[n("li",[e._v("对于复杂的逻辑计算。计算属性是基于它们的响应式依赖进行缓存的，只有在响应式依赖发生改变时，才会重新求值。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<div id=\"example\">\n  <p>Original message: \"{{ message }}\"</p>\n  <p>Computed reversed message: \"{{ reversedMessage }}\"</p>\n</div>\n\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // 计算属性的 getter\n    reversedMessage: function () {\n      // `this` 指向 vm 实例\n      return this.message.split('').reverse().join('')\n    }\n  }\n})\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("setter")])]),e._v(" "),n("ul",[n("li",[e._v("侦听属性watch： 当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的")])]),e._v(" "),n("h2",{attrs:{id:"class与style绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#class与style绑定"}},[e._v("#")]),e._v(" class与style绑定")]),e._v(" "),n("ul",[n("li",[e._v("绑定HTML CSS\n"),n("ol",[n("li",[n("p",[e._v("对象语法"),n("br"),e._v(" "),n("code",[e._v("v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"")])])]),e._v(" "),n("li",[n("p",[e._v("数组语法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<div v-bind:class=\"[activeClass, errorClass]\"></div>\ndata: {\n    activeClass: 'active',\n    errorClass: 'text-danger'\n}\n")])])]),n("p",[e._v("三元表达式\n"),n("code",[e._v("<div v-bind:class=\"[isActive ? activeClass : '', errorClass]\"></div>")])])]),e._v(" "),n("li",[n("p",[e._v("组件上使用"),n("br"),e._v("\n自定义组件上使用 class 属性时，这些 class 将被添加到该组件的根元素上面。这个元素上已经存在的 class 不会被覆盖。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Vue.component('my-component', {\n    template: '<p class=\"foo bar\">Hi</p>'\n})\n")])])])])])]),e._v(" "),n("li",[e._v("绑定内联样式\n"),n("ol",[n("li",[e._v("绑定到对象上"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"></div>\ndata: {\n    activeColor: 'red',\n    fontSize: 30\n}\n\n\n<div v-bind:style=\"styleObject\"></div>\ndata: {\n    styleObject: {\n        color: 'red',\n        fontSize: '13px'\n    }\n}\n")])])])]),e._v(" "),n("li",[e._v("数组语法 "),n("code",[e._v('<div v-bind:style="[baseStyles, overridingStyles]"></div>')])]),e._v(" "),n("li",[e._v("自动添加前缀")]),e._v(" "),n("li",[e._v("多重值"),n("br"),e._v(" "),n("code",[e._v("<div :style=\"{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }\"></div>")]),n("br"),e._v("\n这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。")])])])]),e._v(" "),n("h2",{attrs:{id:"条件渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#条件渲染"}},[e._v("#")]),e._v(" 条件渲染")]),e._v(" "),n("ul",[n("li",[e._v("v-if"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("v-if\nv-eles必须在v-if或者v-if-else后面\n<div v-if=\"type === 'A'\">\nA\n</div>\n<div v-else-if=\"type === 'B'\">\nB\n</div>\n<div v-else-if=\"type === 'C'\">\nC\n</div>\n\n<div v-else>\nNot A/B/C\n</div>\n复用已有元素而不是从头开始渲染，如果不要复用则添加key\n")])])])]),e._v(" "),n("li",[e._v("v-show"),n("br"),e._v("\n不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display")]),e._v(" "),n("li",[e._v("v-if与v-show\n"),n("ol",[n("li",[e._v("v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。")]),e._v(" "),n("li",[e._v("v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。")]),e._v(" "),n("li",[e._v("相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。")]),e._v(" "),n("li",[e._v("一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。")]),e._v(" "),n("li",[e._v("v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。")])])])]),e._v(" "),n("h2",{attrs:{id:"列表渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#列表渲染"}},[e._v("#")]),e._v(" 列表渲染")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("v-for")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("数组\n<ul id=\"example-2\">\n    <li v-for=\"(item, index) in items\">\n        {{ parentMessage }} - {{ index }} - {{ item.message }}\n    </li>\n</ul>\nvar example2 = new Vue({\nel: '#example-2',\ndata: {\n    parentMessage: 'Parent',\n    items: [\n    { message: 'Foo' },\n    { message: 'Bar' }\n    ]\n}\n})\n\n\n对象\n<div v-for=\"(value, name, index) in object\">\n    {{ index }}. {{ name }}: {{ value }}\n</div>\nnew Vue({\nel: '#v-for-object',\ndata: {\n    object: {\n    title: 'How to do lists in Vue',\n    author: 'Jane Doe',\n    publishedAt: '2016-04-10'\n    }\n}\n})\n")])])])]),e._v(" "),n("li",[n("p",[e._v("维护更新状态")]),e._v(" "),n("ol",[n("li",[e._v('数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是就地更新每个元素，并且确保它们在每个索引位置正确渲染。这个类似 Vue 1.x 的 track-by="$index"。'),n("br"),e._v("\n这个默认的模式是高效的，但是只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出。")]),e._v(" "),n("li",[e._v("为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div v-for="item in items" v-bind:key="item.id">\n\x3c!-- 内容 --\x3e\n</div>\n')])])])])])]),e._v(" "),n("li",[n("p",[e._v("数组更新检测")]),e._v(" "),n("ol",[n("li",[e._v("变异方法"),n("br"),e._v("\nVue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：push() pop() shift() unshift() splice() sort()reverse()你可以打开控制台，然后对前面例子的 items 数组尝试调用变异方法。比如 example1.items.push({ message: 'Baz' })。")]),e._v(" "),n("li",[e._v("替换数组"),n("br"),e._v("\n非变异 (non-mutating method) 方法，例如 filter()、concat() 和 slice()。它们不会改变原始数组，而总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组："),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("example1.items = example1.items.filter(function (item) {\n    return item.message.match(/Foo/)\n})\n")])])])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。\n")])])])]),e._v(" "),n("li",[n("p",[e._v("显示过滤/排序后的结果: 计算属性或者方法")])]),e._v(" "),n("li",[n("p",[e._v("v-for使用值范围")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("会把模板重复对应次数。\n<div>\n   <span v-for=\"n in 10\">{{ n }} </span>\n</div>\n\n'12345678910'\n")])])])]),e._v(" "),n("li",[n("p",[n("code",[e._v("<template>")]),e._v("上使用 v-for")])]),e._v(" "),n("li",[n("p",[e._v("v-if和v-for： v-for拥有更高的优先级，有条件地跳过循环的执行，那么可以将 v-if 置于外层元素")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<ul v-if="todos.length">\n    <li v-for="todo in todos">\n        {{ todo }}\n    </li>\n</ul>\n<p v-else>No todos left!</p>\n')])])])]),e._v(" "),n("li",[n("p",[e._v("组件中使用v-for")])])]),e._v(" "),n("h2",{attrs:{id:"事件处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件处理"}},[e._v("#")]),e._v(" 事件处理")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("v-on 指令监听 DOM 事件"),n("br"),e._v(" "),n("code",[e._v('<button v-on:click="counter += 1">Add 1</button>')])])]),e._v(" "),n("li",[n("p",[e._v("事件处理方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\t<button v-on:click=\"greet\">Greet</button>\n\n\tvar example2 = new Vue({\n    el: '#example-2',\n    data: {\n        name: 'Vue.js'\n    },\n    // 在 `methods` 对象中定义方法\n    methods: {\n        greet: function (event) {\n            // `this` 在方法里指向当前 Vue 实例\n            alert('Hello ' + this.name + '!')\n\n            // `event` 是原生 DOM 事件\n            if (event) {\n                alert(event.target.tagName)\n            }\n        }\n    }\n    })\n")])])])]),e._v(" "),n("li",[n("p",[e._v("内联处理器中的方法")]),e._v(" "),n("ol",[n("li",[e._v("内联处理器中的方法")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    <div id=\"example-3\">\n    <button v-on:click=\"say('hi')\">Say hi</button>\n    <button v-on:click=\"say('what')\">Say what</button>\n    </div>\n    new Vue({\n    el: '#example-3',\n    methods: {\n        say: function (message) {\n        alert(message)\n        }\n    }\n    })\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\t<button v-on:click=\"warn('Form cannot be submitted yet.', $event)\">\n        Submit\n    </button>\n    // ...\n    methods: {\n        warn: function (message, event) {\n            // 现在我们可以访问原生事件对象\n            if (event) {\n                event.preventDefault()\n            }\n            alert(message)\n        }\n    }\n")])])])])]),e._v(" "),n("h2",{attrs:{id:"修饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#修饰器"}},[e._v("#")]),e._v(" 修饰器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("- v-on 提供了事件修饰符。  \n\t\t事件修饰符  \n\t\t按钮修饰符  \n\t\t系统修饰键  \n- 在HTML中监听事件\n\t\tVue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上  \n\t\t扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。  \n\t\t因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。  \n\t\t当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。\n")])])]),n("h2",{attrs:{id:"表单输入绑定"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#表单输入绑定"}},[e._v("#")]),e._v(" 表单输入绑定")]),e._v(" "),n("ul",[n("li",[e._v("v-model基础语法\n"),n("ol",[n("li",[e._v("文本"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input v-model="message" placeholder="edit me">\n')])])])]),e._v(" "),n("li",[e._v("多行文本"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<textarea v-model="message" placeholder="add multiple lines"></textarea>\n')])])])]),e._v(" "),n("li",[e._v("复选框"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('1. 单个\n\t<input type="checkbox" id="checkbox" v-model="checked">\n    <label for="checkbox">{{ checked }}</label>    //  true  false\t\n2. 多个\n\t<div id=\'example-3\'>\n        <input type="checkbox" id="jack" value="Jack" v-model="checkedNames">\n        <label for="jack">Jack</label>\n        <input type="checkbox" id="john" value="John" v-model="checkedNames">\n        <label for="john">John</label>\n        <input type="checkbox" id="mike" value="Mike" v-model="checkedNames">\n        <label for="mike">Mike</label>\n        <br>\n        <span>Checked names: {{ checkedNames }}</span>\n    </div>\n    new Vue({\n    el: \'#example-3\',\n    data: {\n        checkedNames: []\n    }\n    })\n    Jack  John  Mike\n    Checked names: [ "Jack", "John", "Mike" ]\n')])])])]),e._v(" "),n("li",[e._v("单选按钮"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="example-4">\n    <input type="radio" id="one" value="One" v-model="picked">\n    <label for="one">One</label>\n    <br>\n\n    <input type="radio" id="two" value="Two" v-model="picked">\n    <label for="two">Two</label>\n    <br>\n\n    <span>Picked: {{ picked }}</span>\n</div>\nnew Vue({\n    el: \'#example-4\',\n    data: {\n        picked: \'\'\n    }\n})\nOne\nTwo\nPicked: One\n')])])]),n("ol",{attrs:{start:"5"}},[n("li",[e._v("选择框")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="example-5">\n    <select v-model="selected">\n        <option disabled value="">请选择</option>\n        <option>A</option>\n        <option>B</option>\n        <option>C</option>\n    </select>\n    <span>Selected: {{ selected }}</span>\n</div>\nnew Vue({\n    el: \'...\',\n    data: {\n        selected: \'\'\n    }\n})\n')])])]),n("ol",{attrs:{start:"6"}},[n("li",[e._v("多选框")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="example-6">\n    <select v-model="selected" multiple style="width: 50px;">\n        <option>A</option>\n        <option>B</option>\n        <option>C</option>\n    </select>\n    <br>\n    <span>Selected: {{ selected }}</span>\n</div>\nnew Vue({\n    el: \'#example-6\',\n    data: {\n        selected: []\n    }\n})\nABC\nSelected: [ "A" ]\n')])])])])])]),e._v(" "),n("li",[e._v("v-mode值绑定\n"),n("ol",[n("li",[e._v("值绑定"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 当选中时，`picked` 为字符串 "a" --\x3e\n<input type="radio" v-model="picked" value="a">\n\n\x3c!-- `toggle` 为 true 或 false --\x3e\n<input type="checkbox" v-model="toggle">\n\n\x3c!-- 当选中第一个选项时，`selected` 为字符串 "abc" --\x3e\n<select v-model="selected">\n    <option value="abc">ABC</option>\n</select>\n\n值绑定到 Vue 实例的一个动态属性上，这时可以用 v-bind 实现，并且这个属性的值可以不是字符串\n')])])])]),e._v(" "),n("li",[e._v("复选框"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input\n    type="checkbox"\n    v-model="toggle"\n    true-value="yes"\n    false-value="no"\n>\n')])])])]),e._v(" "),n("li",[e._v("单选按钮"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<input type="radio" v-model="pick" v-bind:value="a">\n// 当选中时\nvm.pick === vm.a\n')])])])]),e._v(" "),n("li",[e._v("选择框选项"),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<select v-model="selected">\n    \x3c!-- 内联对象字面量 --\x3e\n<option v-bind:value="{ number: 123 }">123</option>\n</select>\n// 当选中时\ntypeof vm.selected // => \'object\'\nvm.selected.number // => 123\n')])])])])])]),e._v(" "),n("li",[e._v("修饰符")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('.lazy\ninput 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步：\n\x3c!-- 在“change”时而非“input”时更新 --\x3e\n<input v-model.lazy="msg" >\n\n.number\n子主题 1自动将用户的输入值转为数值类型\n<input v-model.number="age" type="number">\n这通常很有用，因为即使在 type="number" 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 parseFloat() 解析，则会返回原始的值。\n\n.trim\n自动过滤用户输入的首尾空白字符\n<input v-model.trim="msg">\n和组件配合使用v-model\n')])])]),n("h2",{attrs:{id:"组件基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件基础"}},[e._v("#")]),e._v(" 组件基础")]),e._v(" "),n("ul",[n("li",[e._v("data必须是一个函数")]),e._v(" "),n("li",[e._v("父组件传值子组件 props")]),e._v(" "),n("li",[e._v("子组件传值父组件 方法")]),e._v(" "),n("li",[e._v("单个根元素")])])])}),[],!1,null,null,null);a.default=s.exports}}]);